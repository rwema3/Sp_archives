#include "IPAddressAnalyze.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

struct IPAddressCount {
    std::string ip_address;
    int count;

    IPAddressCount(const std::string& ip, int c) : ip_address(ip), count(c) {}
};

bool compareIPAddressCount(const IPAddressCount& a, const IPAddressCount& b) {
    return a.count > b.count; // Sort in descending order of count
}

void IPAddressAnalyzer::getMostFrequentIPAddress(char* inputFilePath, char* outputFilePath, int n) {
    std::ifstream inputFile(inputFilePath);
    if (!inputFile.is_open()) {
        std::cerr << "Unable to open input file: " << inputFilePath << std::endl;
        return;
    }

    std::ofstream outputFile(outputFilePath);
    if (!outputFile.is_open()) {
        std::cerr << "Unable to open output file: " << outputFilePath << std::endl;
        return;
    }

    std::unordered_map<std::string, int> ipCounts; // Map to store IP addresses and their counts

    std::string line;
    while (std::getline(inputFile, line)) {
        std::istringstream iss(line);
        std::string ip_address;
        int count;
        if (std::getline(iss, ip_address, ',') && iss >> count) {
            ipCounts[ip_address] += count; // Accumulate counts for each IP address
        }
    }

    // Convert the map to a vector of IPAddressCount structs
    std::vector<IPAddressCount> ipCountVector;
    for (const auto& pair : ipCounts) {
        ipCountVector.emplace_back(pair.first, pair.second);
    }

    // Sort the vector based on counts
    std::sort(ipCountVector.begin(), ipCountVector.end(), compareIPAddressCount);

    // Write the top n IP addresses to the output file
    int i = 0;
    for (const auto& ipCount : ipCountVector) {
        if (i >= n) break;
        outputFile << i + 1 << ", " << ipCount.ip_address << ", " << ipCount.count << std::endl;
        ++i;
    }

    inputFile.close();
    outputFile.close();
}
