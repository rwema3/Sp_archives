
sensors_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004678  08004678  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004678  08004678  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000006c  080046ec  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080046ec  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b763  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1a  00000000  00000000  0002b83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c0  00000000  00000000  0002e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018164  00000000  00000000  0002e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e037  00000000  00000000  00046abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a75a  00000000  00000000  00054af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003464  00000000  00000000  000df250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e26b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080045bc 	.word	0x080045bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080045bc 	.word	0x080045bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000776:	4a38      	ldr	r2, [pc, #224]	; (8000858 <HD44780_Init+0xec>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800077c:	4b37      	ldr	r3, [pc, #220]	; (800085c <HD44780_Init+0xf0>)
 800077e:	2208      	movs	r2, #8
 8000780:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <HD44780_Init+0xf4>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <HD44780_Init+0xec>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d907      	bls.n	80007a0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <HD44780_Init+0xf4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <HD44780_Init+0xf4>)
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e006      	b.n	80007ae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <HD44780_Init+0xf4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <HD44780_Init+0xf4>)
 80007ac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80007ae:	f000 f985 	bl	8000abc <DelayInit>
  HAL_Delay(50);
 80007b2:	2032      	movs	r0, #50	; 0x32
 80007b4:	f000 fed4 	bl	8001560 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <HD44780_Init+0xf0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f943 	bl	8000a48 <ExpanderWrite>
  HAL_Delay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f000 fecb 	bl	8001560 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80007ca:	2030      	movs	r0, #48	; 0x30
 80007cc:	f000 f92b 	bl	8000a26 <Write4Bits>
  DelayUS(4500);
 80007d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80007d4:	f000 f99a 	bl	8000b0c <DelayUS>

  Write4Bits(0x03 << 4);
 80007d8:	2030      	movs	r0, #48	; 0x30
 80007da:	f000 f924 	bl	8000a26 <Write4Bits>
  DelayUS(4500);
 80007de:	f241 1094 	movw	r0, #4500	; 0x1194
 80007e2:	f000 f993 	bl	8000b0c <DelayUS>

  Write4Bits(0x03 << 4);
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f000 f91d 	bl	8000a26 <Write4Bits>
  DelayUS(4500);
 80007ec:	f241 1094 	movw	r0, #4500	; 0x1194
 80007f0:	f000 f98c 	bl	8000b0c <DelayUS>

  Write4Bits(0x02 << 4);
 80007f4:	2020      	movs	r0, #32
 80007f6:	f000 f916 	bl	8000a26 <Write4Bits>
  DelayUS(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 f986 	bl	8000b0c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HD44780_Init+0xf4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f8ce 	bl	80009ac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HD44780_Init+0xf8>)
 8000812:	2204      	movs	r2, #4
 8000814:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000816:	f000 f875 	bl	8000904 <HD44780_Display>
  HD44780_Clear();
 800081a:	f000 f82b 	bl	8000874 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HD44780_Init+0xfc>)
 8000820:	2202      	movs	r2, #2
 8000822:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HD44780_Init+0xfc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f8bc 	bl	80009ac <SendCommand>
  DelayUS(4500);
 8000834:	f241 1094 	movw	r0, #4500	; 0x1194
 8000838:	f000 f968 	bl	8000b0c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <HD44780_Init+0x100>)
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f876 	bl	8000930 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <HD44780_Init+0x104>)
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f872 	bl	8000930 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800084c:	f000 f81d 	bl	800088a <HD44780_Home>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000008b 	.word	0x2000008b
 800085c:	2000008c 	.word	0x2000008c
 8000860:	20000088 	.word	0x20000088
 8000864:	20000089 	.word	0x20000089
 8000868:	2000008a 	.word	0x2000008a
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008

08000874 <HD44780_Clear>:

void HD44780_Clear()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 f897 	bl	80009ac <SendCommand>
  DelayUS(2000);
 800087e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000882:	f000 f943 	bl	8000b0c <DelayUS>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <HD44780_Home>:

void HD44780_Home()
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800088e:	2002      	movs	r0, #2
 8000890:	f000 f88c 	bl	80009ac <SendCommand>
  DelayUS(2000);
 8000894:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000898:	f000 f938 	bl	8000b0c <DelayUS>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HD44780_SetCursor+0x5c>)
 80008b2:	f107 0408 	add.w	r4, r7, #8
 80008b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HD44780_SetCursor+0x60>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d303      	bcc.n	80008ce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HD44780_SetCursor+0x60>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	3318      	adds	r3, #24
 80008d4:	443b      	add	r3, r7
 80008d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4413      	add	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f85d 	bl	80009ac <SendCommand>
}
 80008f2:	bf00      	nop
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	080045d4 	.word	0x080045d4
 8000900:	2000008b 	.word	0x2000008b

08000904 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HD44780_Display+0x28>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HD44780_Display+0x28>)
 8000914:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HD44780_Display+0x28>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f843 	bl	80009ac <SendCommand>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000089 	.word	0x20000089

08000930 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	b25b      	sxtb	r3, r3
 800094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094e:	b25b      	sxtb	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f82a 	bl	80009ac <SendCommand>
  for (int i=0; i<8; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e009      	b.n	8000972 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f82e 	bl	80009c8 <SendChar>
  for (int i=0; i<8; i++)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b07      	cmp	r3, #7
 8000976:	ddf2      	ble.n	800095e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800098a:	e006      	b.n	800099a <HD44780_PrintStr+0x18>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f817 	bl	80009c8 <SendChar>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f4      	bne.n	800098c <HD44780_PrintStr+0xa>
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f812 	bl	80009e4 <Send>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f804 	bl	80009e4 <Send>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f023 030f 	bic.w	r3, r3, #15
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f80b 	bl	8000a26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000a10:	7bba      	ldrb	r2, [r7, #14]
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f804 	bl	8000a26 <Write4Bits>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f808 	bl	8000a48 <ExpanderWrite>
  PulseEnable(value);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f820 	bl	8000a80 <PulseEnable>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <ExpanderWrite+0x30>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000a5e:	f107 020f 	add.w	r2, r7, #15
 8000a62:	230a      	movs	r3, #10
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	214e      	movs	r1, #78	; 0x4e
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <ExpanderWrite+0x34>)
 8000a6c:	f001 fe1c 	bl	80026a8 <HAL_I2C_Master_Transmit>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	200000f0 	.word	0x200000f0

08000a80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffd8 	bl	8000a48 <ExpanderWrite>
  DelayUS(20);
 8000a98:	2014      	movs	r0, #20
 8000a9a:	f000 f837 	bl	8000b0c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f023 0304 	bic.w	r3, r3, #4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffce 	bl	8000a48 <ExpanderWrite>
  DelayUS(20);
 8000aac:	2014      	movs	r0, #20
 8000aae:	f000 f82d 	bl	8000b0c <DelayUS>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <DelayInit>:

static void DelayInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <DelayInit+0x48>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <DelayInit+0x48>)
 8000ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <DelayInit+0x48>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <DelayInit+0x48>)
 8000ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <DelayInit+0x4c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <DelayInit+0x4c>)
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <DelayInit+0x4c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <DelayInit+0x4c>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <DelayInit+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000af6:	bf00      	nop
  __ASM volatile ("NOP");
 8000af8:	bf00      	nop
  __ASM volatile ("NOP");
 8000afa:	bf00      	nop
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	e000edf0 	.word	0xe000edf0
 8000b08:	e0001000 	.word	0xe0001000

08000b0c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <DelayUS+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <DelayUS+0x44>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9a      	lsrs	r2, r3, #18
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <DelayUS+0x48>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <DelayUS+0x48>)
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f6      	bhi.n	8000b2e <DelayUS+0x22>
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	e0001000 	.word	0xe0001000

08000b58 <LED_on_Flash>:

// Variable to count the number of times the condition is met
int i = 0;

// Function to control the LED based on the light intensity
void LED_on_Flash(int light) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    // Check if the light intensity is above a threshold (2000 in this case)
    if (light > 2000) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b66:	dd20      	ble.n	8000baa <LED_on_Flash+0x52>
        // Increment the counter
        i = i + 1;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <LED_on_Flash+0x5c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <LED_on_Flash+0x5c>)
 8000b70:	6013      	str	r3, [r2, #0]

        // Check if the counter reaches 5
        if (i == 5) {
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <LED_on_Flash+0x5c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d117      	bne.n	8000baa <LED_on_Flash+0x52>
            // Check the current state of GPIOA Pin 5
            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) != GPIO_PIN_SET) {
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <LED_on_Flash+0x60>)
 8000b7e:	f001 fbfd 	bl	800237c <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d008      	beq.n	8000b9a <LED_on_Flash+0x42>
                // If it's not set, set it
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <LED_on_Flash+0x60>)
 8000b8e:	f001 fc0c 	bl	80023aa <HAL_GPIO_WritePin>
                // Reset the counter
                i = 0;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <LED_on_Flash+0x5c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
                // Reset the counter
                i = 0;
            }
        }
    }
}
 8000b98:	e007      	b.n	8000baa <LED_on_Flash+0x52>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <LED_on_Flash+0x60>)
 8000ba0:	f001 fc03 	bl	80023aa <HAL_GPIO_WritePin>
                i = 0;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <LED_on_Flash+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001c4 	.word	0x200001c4
 8000bb8:	40010800 	.word	0x40010800

08000bbc <main>:


int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0cc      	sub	sp, #304	; 0x130
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fc6b 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f8a3 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 f9cb 	bl	8000f64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bce:	f000 f99f 	bl	8000f10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bd2:	f000 f8f3 	bl	8000dbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bd6:	f000 f92f 	bl	8000e38 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000bda:	f000 f96b 	bl	8000eb4 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000bde:	4846      	ldr	r0, [pc, #280]	; (8000cf8 <main+0x13c>)
 8000be0:	f000 fdba 	bl	8001758 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8000be4:	4845      	ldr	r0, [pc, #276]	; (8000cfc <main+0x140>)
 8000be6:	f000 fdb7 	bl	8001758 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 50);
 8000bea:	2132      	movs	r1, #50	; 0x32
 8000bec:	4842      	ldr	r0, [pc, #264]	; (8000cf8 <main+0x13c>)
 8000bee:	f000 fe8d 	bl	800190c <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 8000bf2:	2164      	movs	r1, #100	; 0x64
 8000bf4:	4841      	ldr	r0, [pc, #260]	; (8000cfc <main+0x140>)
 8000bf6:	f000 fe89 	bl	800190c <HAL_ADC_PollForConversion>
	  converted_ADC_Value_t = HAL_ADC_GetValue(&hadc2);
 8000bfa:	4840      	ldr	r0, [pc, #256]	; (8000cfc <main+0x140>)
 8000bfc:	f000 ff8c 	bl	8001b18 <HAL_ADC_GetValue>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	  HAL_ADC_Stop(&hadc1);
 8000c06:	483c      	ldr	r0, [pc, #240]	; (8000cf8 <main+0x13c>)
 8000c08:	f000 fe54 	bl	80018b4 <HAL_ADC_Stop>
	  converted_ADC_Value_l = HAL_ADC_GetValue(&hadc1);
 8000c0c:	483a      	ldr	r0, [pc, #232]	; (8000cf8 <main+0x13c>)
 8000c0e:	f000 ff83 	bl	8001b18 <HAL_ADC_GetValue>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <main+0x144>)
 8000c18:	801a      	strh	r2, [r3, #0]
	  //sprintf(formated_msg, "Lv: %hu", converted_ADC_Value_l);
	  sprintf(formated_msg, "Lv: %hu", converted_ADC_Value_l);
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <main+0x144>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4938      	ldr	r1, [pc, #224]	; (8000d04 <main+0x148>)
 8000c22:	4839      	ldr	r0, [pc, #228]	; (8000d08 <main+0x14c>)
 8000c24:	f003 f818 	bl	8003c58 <siprintf>

	  LED_on_Flash(converted_ADC_Value_l);
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <main+0x144>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff93 	bl	8000b58 <LED_on_Flash>


	  /*START of LCD*/
	  HD44780_Init(2);
 8000c32:	2002      	movs	r0, #2
 8000c34:	f7ff fd9a 	bl	800076c <HD44780_Init>
	  HD44780_Clear();
 8000c38:	f7ff fe1c 	bl	8000874 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fe2e 	bl	80008a0 <HD44780_SetCursor>
	  HD44780_PrintStr(formated_msg);
 8000c44:	4830      	ldr	r0, [pc, #192]	; (8000d08 <main+0x14c>)
 8000c46:	f7ff fe9c 	bl	8000982 <HD44780_PrintStr>
	  HD44780_SetCursor(10,1);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f7ff fe27 	bl	80008a0 <HD44780_SetCursor>



	  HAL_UART_Transmit(&huart2, (uint8_t *)formated_msg, strlen(formated_msg), HAL_MAX_DELAY);
 8000c52:	482d      	ldr	r0, [pc, #180]	; (8000d08 <main+0x14c>)
 8000c54:	f7ff fa7c 	bl	8000150 <strlen>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	4929      	ldr	r1, [pc, #164]	; (8000d08 <main+0x14c>)
 8000c62:	482a      	ldr	r0, [pc, #168]	; (8000d0c <main+0x150>)
 8000c64:	f002 fe44 	bl	80038f0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6c:	f000 fc78 	bl	8001560 <HAL_Delay>

	  char convertedtemperatureCelcius[150];
	  char convertedtemperatureFahrenheit[150];
	  temp_value_to_Celsius(converted_ADC_Value_t, convertedtemperatureCelcius, sizeof(convertedtemperatureCelcius));
 8000c70:	4639      	mov	r1, r7
 8000c72:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8000c76:	2296      	movs	r2, #150	; 0x96
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f9e1 	bl	8001040 <temp_value_to_Celsius>
	  temp_value_to_Fahrenheit(converted_ADC_Value_t, convertedtemperatureFahrenheit, sizeof(convertedtemperatureFahrenheit));
 8000c7e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000c82:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8000c86:	2296      	movs	r2, #150	; 0x96
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fa11 	bl	80010b0 <temp_value_to_Fahrenheit>

	  HAL_UART_Transmit(&huart2, convertedtemperatureCelcius, strlen(convertedtemperatureCelcius), HAL_MAX_DELAY);
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fa5d 	bl	8000150 <strlen>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	481a      	ldr	r0, [pc, #104]	; (8000d0c <main+0x150>)
 8000ca2:	f002 fe25 	bl	80038f0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, convertedtemperatureFahrenheit, strlen(convertedtemperatureFahrenheit), HAL_MAX_DELAY);
 8000ca6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fa50 	bl	8000150 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <main+0x150>)
 8000cbe:	f002 fe17 	bl	80038f0 <HAL_UART_Transmit>

	  HD44780_Clear();
 8000cc2:	f7ff fdd7 	bl	8000874 <HD44780_Clear>
	  HD44780_SetCursor(0, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fde9 	bl	80008a0 <HD44780_SetCursor>
	  HD44780_PrintStr(convertedtemperatureCelcius);
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe56 	bl	8000982 <HD44780_PrintStr>
	  HAL_Delay(200);
 8000cd6:	20c8      	movs	r0, #200	; 0xc8
 8000cd8:	f000 fc42 	bl	8001560 <HAL_Delay>

	  HD44780_SetCursor(0, 1);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fdde 	bl	80008a0 <HD44780_SetCursor>
	  HD44780_PrintStr(convertedtemperatureFahrenheit);
 8000ce4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe4a 	bl	8000982 <HD44780_PrintStr>
	  HAL_Delay(200);
 8000cee:	20c8      	movs	r0, #200	; 0xc8
 8000cf0:	f000 fc36 	bl	8001560 <HAL_Delay>
  {
 8000cf4:	e773      	b.n	8000bde <main+0x22>
 8000cf6:	bf00      	nop
 8000cf8:	20000090 	.word	0x20000090
 8000cfc:	200000c0 	.word	0x200000c0
 8000d00:	2000018c 	.word	0x2000018c
 8000d04:	080045e4 	.word	0x080045e4
 8000d08:	20000190 	.word	0x20000190
 8000d0c:	20000144 	.word	0x20000144

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	; 0x50
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 ffba 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d54:	2300      	movs	r3, #0
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fffb 	bl	8002d58 <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d68:	f000 f9da 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fa67 	bl	800325c <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d94:	f000 f9c4 	bl	8001120 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fbe8 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000dae:	f000 f9b7 	bl	8001120 <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3750      	adds	r7, #80	; 0x50
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <MX_ADC1_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000de6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000dfa:	f000 fbd5 	bl	80015a8 <HAL_ADC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e04:	f000 f98c 	bl	8001120 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_ADC1_Init+0x74>)
 8000e1a:	f000 fe89 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e24:	f000 f97c 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000090 	.word	0x20000090
 8000e34:	40012400 	.word	0x40012400

08000e38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <MX_ADC2_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e66:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e76:	f000 fb97 	bl	80015a8 <HAL_ADC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000e80:	f000 f94e 	bl	8001120 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_ADC2_Init+0x74>)
 8000e96:	f000 fe4b 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000ea0:	f000 f93e 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000c0 	.word	0x200000c0
 8000eb0:	40012800 	.word	0x40012800

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <MX_I2C1_Init+0x54>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <MX_I2C1_Init+0x58>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_I2C1_Init+0x50>)
 8000ef2:	f001 fa95 	bl	8002420 <HAL_I2C_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000efc:	f000 f910 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000f0 	.word	0x200000f0
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	000186a0 	.word	0x000186a0

08000f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_USART2_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f48:	f002 fc82 	bl	8003850 <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f52:	f000 f8e5 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000144 	.word	0x20000144
 8000f60:	40004400 	.word	0x40004400

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a2c      	ldr	r2, [pc, #176]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a26      	ldr	r2, [pc, #152]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000f96:	f043 0320 	orr.w	r3, r3, #32
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a20      	ldr	r2, [pc, #128]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_GPIO_Init+0xcc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fde:	f001 f9e4 	bl	80023aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <MX_GPIO_Init+0xd8>)
 8000ff8:	f001 f83c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4808      	ldr	r0, [pc, #32]	; (8001034 <MX_GPIO_Init+0xd0>)
 8001014:	f001 f82e 	bl	8002074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f000 fff2 	bl	8002006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001022:	2028      	movs	r0, #40	; 0x28
 8001024:	f001 f80b 	bl	800203e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800
 8001038:	10110000 	.word	0x10110000
 800103c:	40011000 	.word	0x40011000

08001040 <temp_value_to_Celsius>:

/* USER CODE BEGIN 4 */

void temp_value_to_Celsius(uint16_t temper_value, char* convertedvalBuffer, size_t bufferSize) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	81fb      	strh	r3, [r7, #14]
    uint32_t Celsius_value = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    uint32_t Fahrenheit_value = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]

    // Convert temperature to Celsius
    Celsius_value = (temper_value * 0.05);
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fafd 	bl	8000658 <__aeabi_i2d>
 800105e:	a310      	add	r3, pc, #64	; (adr r3, 80010a0 <temp_value_to_Celsius+0x60>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff f87c 	bl	8000160 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fb5c 	bl	800072c <__aeabi_d2uiz>
 8001074:	4603      	mov	r3, r0
 8001076:	617b      	str	r3, [r7, #20]

    // Convert Celsius to Fahrenheit
    Fahrenheit_value = ((Celsius_value * 9) / 5) + 32;
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <temp_value_to_Celsius+0x68>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3320      	adds	r3, #32
 800108a:	613b      	str	r3, [r7, #16]

    // Format the temperature statements into a single string
    snprintf(convertedvalBuffer, bufferSize, "Cel: %lu C", Celsius_value);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <temp_value_to_Celsius+0x6c>)
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f002 fdac 	bl	8003bf0 <sniprintf>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	3fa99999 	.word	0x3fa99999
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	080045ec 	.word	0x080045ec

080010b0 <temp_value_to_Fahrenheit>:

void temp_value_to_Fahrenheit(uint16_t temper_value, char* convertedvalBuffer, size_t bufferSize) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	81fb      	strh	r3, [r7, #14]
    uint32_t Celsius_value = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
    uint32_t Fahrenheit_value = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]

    // Convert temperature to Celsius
    Celsius_value = (temper_value * 0.05);
 80010c6:	89fb      	ldrh	r3, [r7, #14]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fac5 	bl	8000658 <__aeabi_i2d>
 80010ce:	a310      	add	r3, pc, #64	; (adr r3, 8001110 <temp_value_to_Fahrenheit+0x60>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff f844 	bl	8000160 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fb24 	bl	800072c <__aeabi_d2uiz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	617b      	str	r3, [r7, #20]

    // Convert Celsius to Fahrenheit
    Fahrenheit_value = ((Celsius_value * 9) / 5) + 32;
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <temp_value_to_Fahrenheit+0x68>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3320      	adds	r3, #32
 80010fa:	613b      	str	r3, [r7, #16]

    // Format the temperature statements into a single string
    snprintf(convertedvalBuffer, bufferSize, "Fahr: %lu F", Fahrenheit_value);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <temp_value_to_Fahrenheit+0x6c>)
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f002 fd74 	bl	8003bf0 <sniprintf>


}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	9999999a 	.word	0x9999999a
 8001114:	3fa99999 	.word	0x3fa99999
 8001118:	cccccccd 	.word	0xcccccccd
 800111c:	080045f8 	.word	0x080045f8

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  __disable_irq();
	  while (1)
 8001128:	e7fe      	b.n	8001128 <Error_Handler+0x8>
	...

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_MspInit+0x5c>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_MspInit+0x5c>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_MspInit+0x5c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x5c>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x5c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_MspInit+0x60>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_MspInit+0x60>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000

08001190 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ADC_MspInit+0xbc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d122      	bne.n	80011f6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <HAL_ADC_MspInit+0xc4>)
 80011f0:	f000 ff40 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011f4:	e026      	b.n	8001244 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d121      	bne.n	8001244 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001234:	2303      	movs	r3, #3
 8001236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_ADC_MspInit+0xc4>)
 8001240:	f000 ff18 	bl	8002074 <HAL_GPIO_Init>
}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	40012800 	.word	0x40012800

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_I2C_MspInit+0x90>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d132      	bne.n	80012e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_I2C_MspInit+0x94>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_I2C_MspInit+0x94>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_I2C_MspInit+0x94>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129a:	2312      	movs	r3, #18
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <HAL_I2C_MspInit+0x98>)
 80012aa:	f000 fee3 	bl	8002074 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_I2C_MspInit+0x9c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_I2C_MspInit+0x9c>)
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_I2C_MspInit+0x94>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_I2C_MspInit+0x94>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_I2C_MspInit+0x94>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010c00 	.word	0x40010c00
 80012f8:	40010000 	.word	0x40010000

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_UART_MspInit+0x70>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d123      	bne.n	8001364 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_UART_MspInit+0x74>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_UART_MspInit+0x74>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_UART_MspInit+0x74>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_UART_MspInit+0x74>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_UART_MspInit+0x74>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_UART_MspInit+0x74>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800134c:	230c      	movs	r3, #12
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <HAL_UART_MspInit+0x78>)
 8001360:	f000 fe88 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40004400 	.word	0x40004400
 8001370:	40021000 	.word	0x40021000
 8001374:	40010800 	.word	0x40010800

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013be:	f000 f8b3 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013ce:	f001 f805 	bl	80023dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f002 fc4e 	bl	8003ca8 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20005000 	.word	0x20005000
 8001438:	00000400 	.word	0x00000400
 800143c:	200001c8 	.word	0x200001c8
 8001440:	20000318 	.word	0x20000318

08001444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001450:	f7ff fff8 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001456:	490c      	ldr	r1, [pc, #48]	; (8001488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <LoopFillZerobss+0x16>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800146c:	4c09      	ldr	r4, [pc, #36]	; (8001494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147a:	f002 fc1b 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147e:	f7ff fb9d 	bl	8000bbc <main>
  bx lr
 8001482:	4770      	bx	lr
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800148c:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 8001490:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001494:	20000318 	.word	0x20000318

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x28>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x28>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 fd9f 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fe38 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fdb7 	bl	800205a <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 fd7f 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000010 	.word	0x20000010
 8001520:	20000018 	.word	0x20000018
 8001524:	20000014 	.word	0x20000014

08001528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x1c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x20>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <HAL_IncTick+0x20>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	20000018 	.word	0x20000018
 8001548:	200001cc 	.word	0x200001cc

0800154c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <HAL_GetTick+0x10>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	200001cc 	.word	0x200001cc

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fff0 	bl	800154c <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffe0 	bl	800154c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000018 	.word	0x20000018

080015a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0be      	b.n	8001748 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fdd2 	bl	8001190 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fbf1 	bl	8001dd4 <ADC_ConversionStop_Disable>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 8099 	bne.w	8001736 <HAL_ADC_Init+0x18e>
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8095 	bne.w	8001736 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001614:	f023 0302 	bic.w	r3, r3, #2
 8001618:	f043 0202 	orr.w	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001628:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7b1b      	ldrb	r3, [r3, #12]
 800162e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001630:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001640:	d003      	beq.n	800164a <HAL_ADC_Init+0xa2>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <HAL_ADC_Init+0xa8>
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	e000      	b.n	8001652 <HAL_ADC_Init+0xaa>
 8001650:	2300      	movs	r3, #0
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d1b      	ldrb	r3, [r3, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d119      	bne.n	8001694 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7b1b      	ldrb	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	3b01      	subs	r3, #1
 800166e:	035a      	lsls	r2, r3, #13
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e00b      	b.n	8001694 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_ADC_Init+0x1a8>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d003      	beq.n	80016ce <HAL_ADC_Init+0x126>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d104      	bne.n	80016d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	051b      	lsls	r3, r3, #20
 80016d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_ADC_Init+0x1ac>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d10b      	bne.n	8001714 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001712:	e018      	b.n	8001746 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f023 0312 	bic.w	r3, r3, #18
 800171c:	f043 0210 	orr.w	r2, r3, #16
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001734:	e007      	b.n	8001746 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001746:	7dfb      	ldrb	r3, [r7, #23]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	ffe1f7fd 	.word	0xffe1f7fd
 8001754:	ff1f0efe 	.word	0xff1f0efe

08001758 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Start+0x1a>
 800176e:	2302      	movs	r3, #2
 8001770:	e098      	b.n	80018a4 <HAL_ADC_Start+0x14c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fad0 	bl	8001d20 <ADC_Enable>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8087 	bne.w	800189a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a41      	ldr	r2, [pc, #260]	; (80018ac <HAL_ADC_Start+0x154>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d105      	bne.n	80017b6 <HAL_ADC_Start+0x5e>
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_ADC_Start+0x158>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d115      	bne.n	80017e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d026      	beq.n	800181e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e0:	e01d      	b.n	800181e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_ADC_Start+0x158>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_Start+0xaa>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2b      	ldr	r2, [pc, #172]	; (80018ac <HAL_ADC_Start+0x154>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10d      	bne.n	800181e <HAL_ADC_Start+0xc6>
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_ADC_Start+0x158>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001816:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f023 0206 	bic.w	r2, r3, #6
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
 8001836:	e002      	b.n	800183e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f06f 0202 	mvn.w	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800185a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800185e:	d113      	bne.n	8001888 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001864:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_ADC_Start+0x154>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d105      	bne.n	8001876 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_ADC_Start+0x158>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001872:	2b00      	cmp	r3, #0
 8001874:	d108      	bne.n	8001888 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	e00c      	b.n	80018a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e003      	b.n	80018a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40012800 	.word	0x40012800
 80018b0:	40012400 	.word	0x40012400

080018b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Stop+0x1a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e01a      	b.n	8001904 <HAL_ADC_Stop+0x50>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fa7c 	bl	8001dd4 <ADC_ConversionStop_Disable>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001922:	f7ff fe13 	bl	800154c <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f043 0220 	orr.w	r2, r3, #32
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0d3      	b.n	8001af6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d131      	bne.n	80019c0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d12a      	bne.n	80019c0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800196a:	e021      	b.n	80019b0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001972:	d01d      	beq.n	80019b0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ADC_PollForConversion+0x7e>
 800197a:	f7ff fde7 	bl	800154c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d212      	bcs.n	80019b0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0a2      	b.n	8001af6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0d6      	beq.n	800196c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019be:	e070      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <HAL_ADC_PollForConversion+0x1f4>)
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	2002      	movs	r0, #2
 80019c6:	f001 fe8d 	bl	80036e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80019ca:	4603      	mov	r3, r0
 80019cc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6919      	ldr	r1, [r3, #16]
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_ADC_PollForConversion+0x1f8>)
 80019d8:	400b      	ands	r3, r1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d118      	bne.n	8001a10 <HAL_ADC_PollForConversion+0x104>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68d9      	ldr	r1, [r3, #12]
 80019e4:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_ADC_PollForConversion+0x1fc>)
 80019e6:	400b      	ands	r3, r1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d111      	bne.n	8001a10 <HAL_ADC_PollForConversion+0x104>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_ADC_PollForConversion+0x200>)
 80019f4:	400b      	ands	r3, r1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d108      	bne.n	8001a0c <HAL_ADC_PollForConversion+0x100>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68d9      	ldr	r1, [r3, #12]
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_ADC_PollForConversion+0x204>)
 8001a02:	400b      	ands	r3, r1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_PollForConversion+0x100>
 8001a08:	2314      	movs	r3, #20
 8001a0a:	e020      	b.n	8001a4e <HAL_ADC_PollForConversion+0x142>
 8001a0c:	2329      	movs	r3, #41	; 0x29
 8001a0e:	e01e      	b.n	8001a4e <HAL_ADC_PollForConversion+0x142>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_ADC_PollForConversion+0x200>)
 8001a18:	400b      	ands	r3, r1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x120>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <HAL_ADC_PollForConversion+0x204>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00d      	beq.n	8001a48 <HAL_ADC_PollForConversion+0x13c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6919      	ldr	r1, [r3, #16]
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_ADC_PollForConversion+0x208>)
 8001a34:	400b      	ands	r3, r1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d108      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x140>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_ADC_PollForConversion+0x208>)
 8001a42:	400b      	ands	r3, r1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x140>
 8001a48:	2354      	movs	r3, #84	; 0x54
 8001a4a:	e000      	b.n	8001a4e <HAL_ADC_PollForConversion+0x142>
 8001a4c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a54:	e021      	b.n	8001a9a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d01a      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_ADC_PollForConversion+0x168>
 8001a64:	f7ff fd72 	bl	800154c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d20f      	bcs.n	8001a94 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d90b      	bls.n	8001a94 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f043 0204 	orr.w	r2, r3, #4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e030      	b.n	8001af6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3301      	adds	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d8d9      	bhi.n	8001a56 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0212 	mvn.w	r2, #18
 8001aaa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ac2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ac6:	d115      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d111      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d105      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000010 	.word	0x20000010
 8001b04:	24924924 	.word	0x24924924
 8001b08:	00924924 	.word	0x00924924
 8001b0c:	12492492 	.word	0x12492492
 8001b10:	00492492 	.word	0x00492492
 8001b14:	00249249 	.word	0x00249249

08001b18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x20>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0dc      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x1da>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d81c      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b05      	subs	r3, #5
 8001b72:	221f      	movs	r2, #31
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4019      	ands	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b05      	subs	r3, #5
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34
 8001b98:	e03c      	b.n	8001c14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d81c      	bhi.n	8001bdc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b23      	subs	r3, #35	; 0x23
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4019      	ands	r1, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b23      	subs	r3, #35	; 0x23
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bda:	e01b      	b.n	8001c14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b41      	subs	r3, #65	; 0x41
 8001bee:	221f      	movs	r2, #31
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4019      	ands	r1, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b41      	subs	r3, #65	; 0x41
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d91c      	bls.n	8001c56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68d9      	ldr	r1, [r3, #12]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b1e      	subs	r3, #30
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	3b1e      	subs	r3, #30
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	e019      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6919      	ldr	r1, [r3, #16]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4019      	ands	r1, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6898      	ldr	r0, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d003      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c96:	2b11      	cmp	r3, #17
 8001c98:	d132      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d125      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d126      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cc0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d11a      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <HAL_ADC_ConfigChannel+0x1ec>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0c9a      	lsrs	r2, r3, #18
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cee:	e007      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	40012400 	.word	0x40012400
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d040      	beq.n	8001dc0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <ADC_Enable+0xac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <ADC_Enable+0xb0>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9b      	lsrs	r3, r3, #18
 8001d5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d5c:	e002      	b.n	8001d64 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d6a:	f7ff fbef 	bl	800154c <HAL_GetTick>
 8001d6e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d70:	e01f      	b.n	8001db2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d72:	f7ff fbeb 	bl	800154c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d918      	bls.n	8001db2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d011      	beq.n	8001db2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d1d8      	bne.n	8001d72 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000010 	.word	0x20000010
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d12e      	bne.n	8001e4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfe:	f7ff fba5 	bl	800154c <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	e01b      	b.n	8001e3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e06:	f7ff fba1 	bl	800154c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d914      	bls.n	8001e3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10d      	bne.n	8001e3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e007      	b.n	8001e4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d0dc      	beq.n	8001e06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4906      	ldr	r1, [pc, #24]	; (8001ef0 <__NVIC_EnableIRQ+0x34>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff90 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff2d 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff42 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff90 	bl	8001f48 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5f 	bl	8001ef4 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff35 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa2 	bl	8001fac <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e169      	b.n	800235c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002088:	2201      	movs	r2, #1
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8158 	bne.w	8002356 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a9a      	ldr	r2, [pc, #616]	; (8002314 <HAL_GPIO_Init+0x2a0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d05e      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020b0:	4a98      	ldr	r2, [pc, #608]	; (8002314 <HAL_GPIO_Init+0x2a0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d875      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020b6:	4a98      	ldr	r2, [pc, #608]	; (8002318 <HAL_GPIO_Init+0x2a4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d058      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020bc:	4a96      	ldr	r2, [pc, #600]	; (8002318 <HAL_GPIO_Init+0x2a4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d86f      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020c2:	4a96      	ldr	r2, [pc, #600]	; (800231c <HAL_GPIO_Init+0x2a8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d052      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020c8:	4a94      	ldr	r2, [pc, #592]	; (800231c <HAL_GPIO_Init+0x2a8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d869      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020ce:	4a94      	ldr	r2, [pc, #592]	; (8002320 <HAL_GPIO_Init+0x2ac>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04c      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020d4:	4a92      	ldr	r2, [pc, #584]	; (8002320 <HAL_GPIO_Init+0x2ac>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d863      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020da:	4a92      	ldr	r2, [pc, #584]	; (8002324 <HAL_GPIO_Init+0x2b0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d046      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020e0:	4a90      	ldr	r2, [pc, #576]	; (8002324 <HAL_GPIO_Init+0x2b0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d85d      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d82a      	bhi.n	8002140 <HAL_GPIO_Init+0xcc>
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d859      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_GPIO_Init+0x80>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	0800216f 	.word	0x0800216f
 80020f8:	08002149 	.word	0x08002149
 80020fc:	0800215b 	.word	0x0800215b
 8002100:	0800219d 	.word	0x0800219d
 8002104:	080021a3 	.word	0x080021a3
 8002108:	080021a3 	.word	0x080021a3
 800210c:	080021a3 	.word	0x080021a3
 8002110:	080021a3 	.word	0x080021a3
 8002114:	080021a3 	.word	0x080021a3
 8002118:	080021a3 	.word	0x080021a3
 800211c:	080021a3 	.word	0x080021a3
 8002120:	080021a3 	.word	0x080021a3
 8002124:	080021a3 	.word	0x080021a3
 8002128:	080021a3 	.word	0x080021a3
 800212c:	080021a3 	.word	0x080021a3
 8002130:	080021a3 	.word	0x080021a3
 8002134:	080021a3 	.word	0x080021a3
 8002138:	08002151 	.word	0x08002151
 800213c:	08002165 	.word	0x08002165
 8002140:	4a79      	ldr	r2, [pc, #484]	; (8002328 <HAL_GPIO_Init+0x2b4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002146:	e02c      	b.n	80021a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e029      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e024      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	3308      	adds	r3, #8
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e01f      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	330c      	adds	r3, #12
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e01a      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002176:	2304      	movs	r3, #4
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e013      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	611a      	str	r2, [r3, #16]
          break;
 800218e:	e009      	b.n	80021a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002190:	2308      	movs	r3, #8
 8002192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	615a      	str	r2, [r3, #20]
          break;
 800219a:	e003      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e000      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          break;
 80021a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2bff      	cmp	r3, #255	; 0xff
 80021a8:	d801      	bhi.n	80021ae <HAL_GPIO_Init+0x13a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_Init+0x13e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2bff      	cmp	r3, #255	; 0xff
 80021b8:	d802      	bhi.n	80021c0 <HAL_GPIO_Init+0x14c>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x152>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3b08      	subs	r3, #8
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	210f      	movs	r1, #15
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80b1 	beq.w	8002356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f4:	4b4d      	ldr	r3, [pc, #308]	; (800232c <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_GPIO_Init+0x2b8>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b4a      	ldr	r3, [pc, #296]	; (800232c <HAL_GPIO_Init+0x2b8>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800220c:	4a48      	ldr	r2, [pc, #288]	; (8002330 <HAL_GPIO_Init+0x2bc>)
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a40      	ldr	r2, [pc, #256]	; (8002334 <HAL_GPIO_Init+0x2c0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_GPIO_Init+0x1ec>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3f      	ldr	r2, [pc, #252]	; (8002338 <HAL_GPIO_Init+0x2c4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00d      	beq.n	800225c <HAL_GPIO_Init+0x1e8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3e      	ldr	r2, [pc, #248]	; (800233c <HAL_GPIO_Init+0x2c8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x1e4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a3d      	ldr	r2, [pc, #244]	; (8002340 <HAL_GPIO_Init+0x2cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_GPIO_Init+0x1e0>
 8002250:	2303      	movs	r3, #3
 8002252:	e006      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 8002254:	2304      	movs	r3, #4
 8002256:	e004      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 8002258:	2302      	movs	r3, #2
 800225a:	e002      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 8002260:	2300      	movs	r3, #0
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	f002 0203 	and.w	r2, r2, #3
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	4093      	lsls	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002272:	492f      	ldr	r1, [pc, #188]	; (8002330 <HAL_GPIO_Init+0x2bc>)
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	492c      	ldr	r1, [pc, #176]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4928      	ldr	r1, [pc, #160]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4922      	ldr	r1, [pc, #136]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60cb      	str	r3, [r1, #12]
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	491e      	ldr	r1, [pc, #120]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4918      	ldr	r1, [pc, #96]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4914      	ldr	r1, [pc, #80]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d021      	beq.n	8002348 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e021      	b.n	8002356 <HAL_GPIO_Init+0x2e2>
 8002312:	bf00      	nop
 8002314:	10320000 	.word	0x10320000
 8002318:	10310000 	.word	0x10310000
 800231c:	10220000 	.word	0x10220000
 8002320:	10210000 	.word	0x10210000
 8002324:	10120000 	.word	0x10120000
 8002328:	10110000 	.word	0x10110000
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	40010800 	.word	0x40010800
 8002338:	40010c00 	.word	0x40010c00
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_GPIO_Init+0x304>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	43db      	mvns	r3, r3
 8002350:	4909      	ldr	r1, [pc, #36]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002352:	4013      	ands	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	f47f ae8e 	bne.w	8002088 <HAL_GPIO_Init+0x14>
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	372c      	adds	r7, #44	; 0x2c
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40010400 	.word	0x40010400

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]
 80023b6:	4613      	mov	r3, r2
 80023b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ba:	787b      	ldrb	r3, [r7, #1]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023c6:	e003      	b.n	80023d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	041a      	lsls	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f806 	bl	800240c <HAL_GPIO_EXTI_Callback>
  }
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e12b      	b.n	800268a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe ff08 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002484:	f001 f832 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 8002488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a81      	ldr	r2, [pc, #516]	; (8002694 <HAL_I2C_Init+0x274>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d807      	bhi.n	80024a4 <HAL_I2C_Init+0x84>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a80      	ldr	r2, [pc, #512]	; (8002698 <HAL_I2C_Init+0x278>)
 8002498:	4293      	cmp	r3, r2
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e006      	b.n	80024b2 <HAL_I2C_Init+0x92>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a7d      	ldr	r2, [pc, #500]	; (800269c <HAL_I2C_Init+0x27c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	bf94      	ite	ls
 80024ac:	2301      	movls	r3, #1
 80024ae:	2300      	movhi	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0e7      	b.n	800268a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a78      	ldr	r2, [pc, #480]	; (80026a0 <HAL_I2C_Init+0x280>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0c9b      	lsrs	r3, r3, #18
 80024c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a6a      	ldr	r2, [pc, #424]	; (8002694 <HAL_I2C_Init+0x274>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d802      	bhi.n	80024f4 <HAL_I2C_Init+0xd4>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3301      	adds	r3, #1
 80024f2:	e009      	b.n	8002508 <HAL_I2C_Init+0xe8>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <HAL_I2C_Init+0x284>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	3301      	adds	r3, #1
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	430b      	orrs	r3, r1
 800250e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800251a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	495c      	ldr	r1, [pc, #368]	; (8002694 <HAL_I2C_Init+0x274>)
 8002524:	428b      	cmp	r3, r1
 8002526:	d819      	bhi.n	800255c <HAL_I2C_Init+0x13c>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e59      	subs	r1, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fbb1 f3f3 	udiv	r3, r1, r3
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800253c:	400b      	ands	r3, r1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_I2C_Init+0x138>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e59      	subs	r1, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002556:	e051      	b.n	80025fc <HAL_I2C_Init+0x1dc>
 8002558:	2304      	movs	r3, #4
 800255a:	e04f      	b.n	80025fc <HAL_I2C_Init+0x1dc>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d111      	bne.n	8002588 <HAL_I2C_Init+0x168>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e58      	subs	r0, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	440b      	add	r3, r1
 8002572:	fbb0 f3f3 	udiv	r3, r0, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e012      	b.n	80025ae <HAL_I2C_Init+0x18e>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	0099      	lsls	r1, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	fbb0 f3f3 	udiv	r3, r0, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Init+0x196>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e022      	b.n	80025fc <HAL_I2C_Init+0x1dc>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10e      	bne.n	80025dc <HAL_I2C_Init+0x1bc>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e58      	subs	r0, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	440b      	add	r3, r1
 80025cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025da:	e00f      	b.n	80025fc <HAL_I2C_Init+0x1dc>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	6809      	ldr	r1, [r1, #0]
 8002600:	4313      	orrs	r3, r2
 8002602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800262a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6911      	ldr	r1, [r2, #16]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	430b      	orrs	r3, r1
 800263e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	000186a0 	.word	0x000186a0
 8002698:	001e847f 	.word	0x001e847f
 800269c:	003d08ff 	.word	0x003d08ff
 80026a0:	431bde83 	.word	0x431bde83
 80026a4:	10624dd3 	.word	0x10624dd3

080026a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	461a      	mov	r2, r3
 80026b4:	460b      	mov	r3, r1
 80026b6:	817b      	strh	r3, [r7, #10]
 80026b8:	4613      	mov	r3, r2
 80026ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7fe ff46 	bl	800154c <HAL_GetTick>
 80026c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	f040 80e0 	bne.w	8002890 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	4970      	ldr	r1, [pc, #448]	; (800289c <HAL_I2C_Master_Transmit+0x1f4>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f964 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0d3      	b.n	8002892 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_I2C_Master_Transmit+0x50>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0cc      	b.n	8002892 <HAL_I2C_Master_Transmit+0x1ea>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d007      	beq.n	800271e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2221      	movs	r2, #33	; 0x21
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2210      	movs	r2, #16
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	893a      	ldrh	r2, [r7, #8]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002760:	8979      	ldrh	r1, [r7, #10]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	6a3a      	ldr	r2, [r7, #32]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f89c 	bl	80028a4 <I2C_MasterRequestWrite>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e08d      	b.n	8002892 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800278c:	e066      	b.n	800285c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	6a39      	ldr	r1, [r7, #32]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fa22 	bl	8002bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d107      	bne.n	80027b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d11b      	bne.n	8002830 <HAL_I2C_Master_Transmit+0x188>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d017      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	6a39      	ldr	r1, [r7, #32]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fa19 	bl	8002c6c <I2C_WaitOnBTFFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b04      	cmp	r3, #4
 8002846:	d107      	bne.n	8002858 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e01a      	b.n	8002892 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	d194      	bne.n	800278e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	00100002 	.word	0x00100002
 80028a0:	ffff0000 	.word	0xffff0000

080028a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	460b      	mov	r3, r1
 80028b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d006      	beq.n	80028ce <I2C_MasterRequestWrite+0x2a>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d003      	beq.n	80028ce <I2C_MasterRequestWrite+0x2a>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028cc:	d108      	bne.n	80028e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e00b      	b.n	80028f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b12      	cmp	r3, #18
 80028e6:	d107      	bne.n	80028f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f84f 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291e:	d103      	bne.n	8002928 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e035      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	e01b      	b.n	8002980 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	11db      	asrs	r3, r3, #7
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0306 	and.w	r3, r3, #6
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f063 030f 	orn	r3, r3, #15
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <I2C_MasterRequestWrite+0xfc>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f898 	bl	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e010      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4907      	ldr	r1, [pc, #28]	; (80029a4 <I2C_MasterRequestWrite+0x100>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f888 	bl	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00010008 	.word	0x00010008
 80029a4:	00010002 	.word	0x00010002

080029a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b8:	e048      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d044      	beq.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe fdc3 	bl	800154c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d139      	bne.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10d      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	e00c      	b.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d116      	bne.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e023      	b.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10d      	bne.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4013      	ands	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	e00c      	b.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d093      	beq.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aaa:	e071      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d123      	bne.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e067      	b.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0a:	d041      	beq.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0c:	f7fe fd1e 	bl	800154c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d302      	bcc.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d136      	bne.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10c      	bne.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e00b      	b.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e021      	b.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10c      	bne.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e00b      	b.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f af6d 	bne.w	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be8:	e034      	b.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f886 	bl	8002cfc <I2C_IsAcknowledgeFailed>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e034      	b.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d028      	beq.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe fca3 	bl	800154c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11d      	bne.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d1c3      	bne.n	8002bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	e034      	b.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f83e 	bl	8002cfc <I2C_IsAcknowledgeFailed>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e034      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d028      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe fc5b 	bl	800154c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11d      	bne.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d016      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e007      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d1c3      	bne.n	8002c7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d11b      	bne.n	8002d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e272      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8087 	beq.w	8002e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d78:	4b92      	ldr	r3, [pc, #584]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d00c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d84:	4b8f      	ldr	r3, [pc, #572]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d112      	bne.n	8002db6 <HAL_RCC_OscConfig+0x5e>
 8002d90:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9e:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x12c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d168      	bne.n	8002e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e24c      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x76>
 8002dc0:	4b80      	ldr	r3, [pc, #512]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a7f      	ldr	r2, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	e02e      	b.n	8002e2c <HAL_RCC_OscConfig+0xd4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x98>
 8002dd6:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7a      	ldr	r2, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b78      	ldr	r3, [pc, #480]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a77      	ldr	r2, [pc, #476]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xd4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0xbc>
 8002dfa:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a71      	ldr	r2, [pc, #452]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xd4>
 8002e14:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a67      	ldr	r2, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fb8a 	bl	800154c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fb86 	bl	800154c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e200      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe4>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb76 	bl	800154c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fb72 	bl	800154c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1ec      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x10c>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d063      	beq.n	8002f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e92:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d11c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x18c>
 8002eaa:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x176>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1c0      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4939      	ldr	r1, [pc, #228]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e03a      	b.n	8002f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fb2b 	bl	800154c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe fb27 	bl	800154c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e1a1      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4927      	ldr	r1, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fb0a 	bl	800154c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fb06 	bl	800154c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e180      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d03a      	beq.n	8002fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d019      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f74:	f7fe faea 	bl	800154c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fae6 	bl	800154c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e160      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f000 face 	bl	800353c <RCC_Delay>
 8002fa0:	e01c      	b.n	8002fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fad0 	bl	800154c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fae:	e00f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe facc 	bl	800154c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d908      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e146      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	42420000 	.word	0x42420000
 8002fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b92      	ldr	r3, [pc, #584]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e9      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a6 	beq.w	8003136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fee:	4b8b      	ldr	r3, [pc, #556]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4a87      	ldr	r2, [pc, #540]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	61d3      	str	r3, [r2, #28]
 8003006:	4b85      	ldr	r3, [pc, #532]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCC_OscConfig+0x4c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x4c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7e      	ldr	r2, [pc, #504]	; (8003220 <HAL_RCC_OscConfig+0x4c8>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302e:	f7fe fa8d 	bl	800154c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003036:	f7fe fa89 	bl	800154c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e103      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4b75      	ldr	r3, [pc, #468]	; (8003220 <HAL_RCC_OscConfig+0x4c8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x312>
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e02d      	b.n	80030c6 <HAL_RCC_OscConfig+0x36e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x334>
 8003072:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6213      	str	r3, [r2, #32]
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4a66      	ldr	r2, [pc, #408]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	6213      	str	r3, [r2, #32]
 800308a:	e01c      	b.n	80030c6 <HAL_RCC_OscConfig+0x36e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_OscConfig+0x356>
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a60      	ldr	r2, [pc, #384]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	4b5e      	ldr	r3, [pc, #376]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4a5d      	ldr	r2, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6213      	str	r3, [r2, #32]
 80030ac:	e00b      	b.n	80030c6 <HAL_RCC_OscConfig+0x36e>
 80030ae:	4b5b      	ldr	r3, [pc, #364]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a5a      	ldr	r2, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6213      	str	r3, [r2, #32]
 80030ba:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4a57      	ldr	r2, [pc, #348]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	f023 0304 	bic.w	r3, r3, #4
 80030c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d015      	beq.n	80030fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fa3d 	bl	800154c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe fa39 	bl	800154c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0b1      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ee      	beq.n	80030d6 <HAL_RCC_OscConfig+0x37e>
 80030f8:	e014      	b.n	8003124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fa27 	bl	800154c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fa23 	bl	800154c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e09b      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	4b40      	ldr	r3, [pc, #256]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ee      	bne.n	8003102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312a:	4b3c      	ldr	r3, [pc, #240]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8087 	beq.w	800324e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003140:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d061      	beq.n	8003210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d146      	bne.n	80031e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b33      	ldr	r3, [pc, #204]	; (8003224 <HAL_RCC_OscConfig+0x4cc>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fe f9f7 	bl	800154c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe f9f3 	bl	800154c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e06d      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d108      	bne.n	800319c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4921      	ldr	r1, [pc, #132]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a19      	ldr	r1, [r3, #32]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	430b      	orrs	r3, r1
 80031ae:	491b      	ldr	r1, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x4cc>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe f9c7 	bl	800154c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe f9c3 	bl	800154c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46a>
 80031e0:	e035      	b.n	800324e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x4cc>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe f9b0 	bl	800154c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe f9ac 	bl	800154c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e026      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x4c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x498>
 800320e:	e01e      	b.n	800324e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e019      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
 800321c:	40021000 	.word	0x40021000
 8003220:	40007000 	.word	0x40007000
 8003224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x500>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	429a      	cmp	r2, r3
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0d0      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	4965      	ldr	r1, [pc, #404]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0b8      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	494d      	ldr	r1, [pc, #308]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d040      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e073      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e06b      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b39      	ldr	r3, [pc, #228]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4936      	ldr	r1, [pc, #216]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe f8fe 	bl	800154c <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe f8fa 	bl	800154c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e053      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d210      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	4922      	ldr	r1, [pc, #136]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e032      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	490e      	ldr	r1, [pc, #56]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ea:	f000 f821 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	490a      	ldr	r1, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	5ccb      	ldrb	r3, [r1, r3]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1cc>)
 8003404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1d0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe f85c 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40022000 	.word	0x40022000
 8003420:	40021000 	.word	0x40021000
 8003424:	08004604 	.word	0x08004604
 8003428:	20000010 	.word	0x20000010
 800342c:	20000014 	.word	0x20000014

08003430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x30>
 800345a:	2b08      	cmp	r3, #8
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x36>
 800345e:	e027      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003462:	613b      	str	r3, [r7, #16]
      break;
 8003464:	e027      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d010      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	0c5b      	lsrs	r3, r3, #17
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003492:	fb03 f202 	mul.w	r2, r3, r2
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e004      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	613b      	str	r3, [r7, #16]
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034b2:	613b      	str	r3, [r7, #16]
      break;
 80034b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b6:	693b      	ldr	r3, [r7, #16]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	007a1200 	.word	0x007a1200
 80034cc:	0800461c 	.word	0x0800461c
 80034d0:	0800462c 	.word	0x0800462c
 80034d4:	003d0900 	.word	0x003d0900

080034d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034dc:	4b02      	ldr	r3, [pc, #8]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	20000010 	.word	0x20000010

080034ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f0:	f7ff fff2 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	08004614 	.word	0x08004614

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003518:	f7ff ffde 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0adb      	lsrs	r3, r3, #11
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	08004614 	.word	0x08004614

0800353c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <RCC_Delay+0x34>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <RCC_Delay+0x38>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0a5b      	lsrs	r3, r3, #9
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003558:	bf00      	nop
  }
  while (Delay --);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1e5a      	subs	r2, r3, #1
 800355e:	60fa      	str	r2, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f9      	bne.n	8003558 <RCC_Delay+0x1c>
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	20000010 	.word	0x20000010
 8003574:	10624dd3 	.word	0x10624dd3

08003578 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d07d      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4a4b      	ldr	r2, [pc, #300]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ae:	61d3      	str	r3, [r2, #28]
 80035b0:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035bc:	2301      	movs	r3, #1
 80035be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d118      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a42      	ldr	r2, [pc, #264]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d8:	f7fd ffb8 	bl	800154c <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fd ffb4 	bl	800154c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e06d      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02e      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	429a      	cmp	r2, r3
 800361a:	d027      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361c:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003626:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003632:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d014      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd ff83 	bl	800154c <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd ff7f 	bl	800154c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e036      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ee      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4917      	ldr	r1, [pc, #92]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	4313      	orrs	r3, r2
 800367c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	490b      	ldr	r1, [pc, #44]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40007000 	.word	0x40007000
 80036e0:	42420440 	.word	0x42420440

080036e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b10      	cmp	r3, #16
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b10      	cmp	r3, #16
 800370a:	f200 808a 	bhi.w	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d045      	beq.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d075      	beq.n	8003806 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800371a:	e082      	b.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003722:	4b45      	ldr	r3, [pc, #276]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d07b      	beq.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	4a41      	ldr	r2, [pc, #260]	; (800383c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003738:	5cd3      	ldrb	r3, [r2, r3]
 800373a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d015      	beq.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003746:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	0c5b      	lsrs	r3, r3, #17
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fbb2 f2f3 	udiv	r2, r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e004      	b.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4a34      	ldr	r2, [pc, #208]	; (8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800377c:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003788:	d102      	bne.n	8003790 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	61bb      	str	r3, [r7, #24]
      break;
 800378e:	e04a      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
      break;
 800379e:	e042      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b0:	d108      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80037bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e01f      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ce:	d109      	bne.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80037dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e00f      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d11c      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d016      	beq.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80037fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003800:	61bb      	str	r3, [r7, #24]
      break;
 8003802:	e012      	b.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003804:	e011      	b.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003806:	f7ff fe85 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0b9b      	lsrs	r3, r3, #14
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	3301      	adds	r3, #1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	61bb      	str	r3, [r7, #24]
      break;
 8003820:	e004      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800382a:	bf00      	nop
    }
  }
  return (frequency);
 800382c:	69bb      	ldr	r3, [r7, #24]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	08004630 	.word	0x08004630
 8003840:	08004640 	.word	0x08004640
 8003844:	007a1200 	.word	0x007a1200
 8003848:	003d0900 	.word	0x003d0900
 800384c:	aaaaaaab 	.word	0xaaaaaaab

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fd40 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f91d 	bl	8003ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d16d      	bne.n	80039ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Transmit+0x2c>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e066      	b.n	80039ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fd fe0d 	bl	800154c <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x6c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003964:	e02a      	b.n	80039bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f840 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e036      	b.n	80039ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3302      	adds	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e007      	b.n	80039ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1cf      	bne.n	8003966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2140      	movs	r1, #64	; 0x40
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f810 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b090      	sub	sp, #64	; 0x40
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a06:	e050      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d04c      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a16:	f7fd fd99 	bl	800154c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d241      	bcs.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a46:	637a      	str	r2, [r7, #52]	; 0x34
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a7a:	623a      	str	r2, [r7, #32]
 8003a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d09f      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3740      	adds	r7, #64	; 0x40
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b0e:	f023 030c 	bic.w	r3, r3, #12
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <UART_SetConfig+0x114>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d103      	bne.n	8003b44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff fcea 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	e002      	b.n	8003b4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7ff fcd2 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 8003b48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <UART_SetConfig+0x118>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	0119      	lsls	r1, r3, #4
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <UART_SetConfig+0x118>)
 8003b82:	fba3 0302 	umull	r0, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2064      	movs	r0, #100	; 0x64
 8003b8a:	fb00 f303 	mul.w	r3, r0, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	3332      	adds	r3, #50	; 0x32
 8003b94:	4a15      	ldr	r2, [pc, #84]	; (8003bec <UART_SetConfig+0x118>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba0:	4419      	add	r1, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009a      	lsls	r2, r3, #2
 8003bac:	441a      	add	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <UART_SetConfig+0x118>)
 8003bba:	fba3 0302 	umull	r0, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2064      	movs	r0, #100	; 0x64
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	3332      	adds	r3, #50	; 0x32
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <UART_SetConfig+0x118>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	440a      	add	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40013800 	.word	0x40013800
 8003bec:	51eb851f 	.word	0x51eb851f

08003bf0 <sniprintf>:
 8003bf0:	b40c      	push	{r2, r3}
 8003bf2:	b530      	push	{r4, r5, lr}
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <sniprintf+0x64>)
 8003bf6:	1e0c      	subs	r4, r1, #0
 8003bf8:	681d      	ldr	r5, [r3, #0]
 8003bfa:	b09d      	sub	sp, #116	; 0x74
 8003bfc:	da08      	bge.n	8003c10 <sniprintf+0x20>
 8003bfe:	238b      	movs	r3, #139	; 0x8b
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	b01d      	add	sp, #116	; 0x74
 8003c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c0c:	b002      	add	sp, #8
 8003c0e:	4770      	bx	lr
 8003c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c18:	bf0c      	ite	eq
 8003c1a:	4623      	moveq	r3, r4
 8003c1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c20:	9304      	str	r3, [sp, #16]
 8003c22:	9307      	str	r3, [sp, #28]
 8003c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c28:	9002      	str	r0, [sp, #8]
 8003c2a:	9006      	str	r0, [sp, #24]
 8003c2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c30:	4628      	mov	r0, r5
 8003c32:	ab21      	add	r3, sp, #132	; 0x84
 8003c34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c36:	a902      	add	r1, sp, #8
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	f000 f9af 	bl	8003f9c <_svfiprintf_r>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	bfbc      	itt	lt
 8003c42:	238b      	movlt	r3, #139	; 0x8b
 8003c44:	602b      	strlt	r3, [r5, #0]
 8003c46:	2c00      	cmp	r4, #0
 8003c48:	d0dd      	beq.n	8003c06 <sniprintf+0x16>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	9b02      	ldr	r3, [sp, #8]
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e7d9      	b.n	8003c06 <sniprintf+0x16>
 8003c52:	bf00      	nop
 8003c54:	20000068 	.word	0x20000068

08003c58 <siprintf>:
 8003c58:	b40e      	push	{r1, r2, r3}
 8003c5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c5e:	b500      	push	{lr}
 8003c60:	b09c      	sub	sp, #112	; 0x70
 8003c62:	ab1d      	add	r3, sp, #116	; 0x74
 8003c64:	9002      	str	r0, [sp, #8]
 8003c66:	9006      	str	r0, [sp, #24]
 8003c68:	9107      	str	r1, [sp, #28]
 8003c6a:	9104      	str	r1, [sp, #16]
 8003c6c:	4808      	ldr	r0, [pc, #32]	; (8003c90 <siprintf+0x38>)
 8003c6e:	4909      	ldr	r1, [pc, #36]	; (8003c94 <siprintf+0x3c>)
 8003c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c74:	9105      	str	r1, [sp, #20]
 8003c76:	6800      	ldr	r0, [r0, #0]
 8003c78:	a902      	add	r1, sp, #8
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	f000 f98e 	bl	8003f9c <_svfiprintf_r>
 8003c80:	2200      	movs	r2, #0
 8003c82:	9b02      	ldr	r3, [sp, #8]
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	b01c      	add	sp, #112	; 0x70
 8003c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c8c:	b003      	add	sp, #12
 8003c8e:	4770      	bx	lr
 8003c90:	20000068 	.word	0x20000068
 8003c94:	ffff0208 	.word	0xffff0208

08003c98 <memset>:
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4402      	add	r2, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000068 	.word	0x20000068

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	4d0c      	ldr	r5, [pc, #48]	; (8003cec <__libc_init_array+0x38>)
 8003cba:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	42a6      	cmp	r6, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	f000 fc7a 	bl	80045bc <_init>
 8003cc8:	2600      	movs	r6, #0
 8003cca:	4d0a      	ldr	r5, [pc, #40]	; (8003cf4 <__libc_init_array+0x40>)
 8003ccc:	4c0a      	ldr	r4, [pc, #40]	; (8003cf8 <__libc_init_array+0x44>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	42a6      	cmp	r6, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cdc:	4798      	blx	r3
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce6:	4798      	blx	r3
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	08004678 	.word	0x08004678
 8003cf0:	08004678 	.word	0x08004678
 8003cf4:	08004678 	.word	0x08004678
 8003cf8:	0800467c 	.word	0x0800467c

08003cfc <__retarget_lock_acquire_recursive>:
 8003cfc:	4770      	bx	lr

08003cfe <__retarget_lock_release_recursive>:
 8003cfe:	4770      	bx	lr

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d040      	beq.n	8003d8a <_free_r+0x8a>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f000 f8dc 	bl	8003ed0 <__malloc_lock>
 8003d18:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <_free_r+0x8c>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	b933      	cbnz	r3, 8003d2c <_free_r+0x2c>
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	6014      	str	r4, [r2, #0]
 8003d22:	4628      	mov	r0, r5
 8003d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d28:	f000 b8d8 	b.w	8003edc <__malloc_unlock>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d908      	bls.n	8003d42 <_free_r+0x42>
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	1821      	adds	r1, r4, r0
 8003d34:	428b      	cmp	r3, r1
 8003d36:	bf01      	itttt	eq
 8003d38:	6819      	ldreq	r1, [r3, #0]
 8003d3a:	685b      	ldreq	r3, [r3, #4]
 8003d3c:	1809      	addeq	r1, r1, r0
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	e7ed      	b.n	8003d1e <_free_r+0x1e>
 8003d42:	461a      	mov	r2, r3
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b10b      	cbz	r3, 8003d4c <_free_r+0x4c>
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d9fa      	bls.n	8003d42 <_free_r+0x42>
 8003d4c:	6811      	ldr	r1, [r2, #0]
 8003d4e:	1850      	adds	r0, r2, r1
 8003d50:	42a0      	cmp	r0, r4
 8003d52:	d10b      	bne.n	8003d6c <_free_r+0x6c>
 8003d54:	6820      	ldr	r0, [r4, #0]
 8003d56:	4401      	add	r1, r0
 8003d58:	1850      	adds	r0, r2, r1
 8003d5a:	4283      	cmp	r3, r0
 8003d5c:	6011      	str	r1, [r2, #0]
 8003d5e:	d1e0      	bne.n	8003d22 <_free_r+0x22>
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4408      	add	r0, r1
 8003d66:	6010      	str	r0, [r2, #0]
 8003d68:	6053      	str	r3, [r2, #4]
 8003d6a:	e7da      	b.n	8003d22 <_free_r+0x22>
 8003d6c:	d902      	bls.n	8003d74 <_free_r+0x74>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	602b      	str	r3, [r5, #0]
 8003d72:	e7d6      	b.n	8003d22 <_free_r+0x22>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	1821      	adds	r1, r4, r0
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	bf01      	itttt	eq
 8003d7c:	6819      	ldreq	r1, [r3, #0]
 8003d7e:	685b      	ldreq	r3, [r3, #4]
 8003d80:	1809      	addeq	r1, r1, r0
 8003d82:	6021      	streq	r1, [r4, #0]
 8003d84:	6063      	str	r3, [r4, #4]
 8003d86:	6054      	str	r4, [r2, #4]
 8003d88:	e7cb      	b.n	8003d22 <_free_r+0x22>
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	20000310 	.word	0x20000310

08003d90 <sbrk_aligned>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	4e0e      	ldr	r6, [pc, #56]	; (8003dcc <sbrk_aligned+0x3c>)
 8003d94:	460c      	mov	r4, r1
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b911      	cbnz	r1, 8003da2 <sbrk_aligned+0x12>
 8003d9c:	f000 fbaa 	bl	80044f4 <_sbrk_r>
 8003da0:	6030      	str	r0, [r6, #0]
 8003da2:	4621      	mov	r1, r4
 8003da4:	4628      	mov	r0, r5
 8003da6:	f000 fba5 	bl	80044f4 <_sbrk_r>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <sbrk_aligned+0x34>
 8003dae:	1cc4      	adds	r4, r0, #3
 8003db0:	f024 0403 	bic.w	r4, r4, #3
 8003db4:	42a0      	cmp	r0, r4
 8003db6:	d007      	beq.n	8003dc8 <sbrk_aligned+0x38>
 8003db8:	1a21      	subs	r1, r4, r0
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 fb9a 	bl	80044f4 <_sbrk_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d101      	bne.n	8003dc8 <sbrk_aligned+0x38>
 8003dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc8:	4620      	mov	r0, r4
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	20000314 	.word	0x20000314

08003dd0 <_malloc_r>:
 8003dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	1ccd      	adds	r5, r1, #3
 8003dd6:	f025 0503 	bic.w	r5, r5, #3
 8003dda:	3508      	adds	r5, #8
 8003ddc:	2d0c      	cmp	r5, #12
 8003dde:	bf38      	it	cc
 8003de0:	250c      	movcc	r5, #12
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	4607      	mov	r7, r0
 8003de6:	db01      	blt.n	8003dec <_malloc_r+0x1c>
 8003de8:	42a9      	cmp	r1, r5
 8003dea:	d905      	bls.n	8003df8 <_malloc_r+0x28>
 8003dec:	230c      	movs	r3, #12
 8003dee:	2600      	movs	r6, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4630      	mov	r0, r6
 8003df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ecc <_malloc_r+0xfc>
 8003dfc:	f000 f868 	bl	8003ed0 <__malloc_lock>
 8003e00:	f8d8 3000 	ldr.w	r3, [r8]
 8003e04:	461c      	mov	r4, r3
 8003e06:	bb5c      	cbnz	r4, 8003e60 <_malloc_r+0x90>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff ffc0 	bl	8003d90 <sbrk_aligned>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	4604      	mov	r4, r0
 8003e14:	d155      	bne.n	8003ec2 <_malloc_r+0xf2>
 8003e16:	f8d8 4000 	ldr.w	r4, [r8]
 8003e1a:	4626      	mov	r6, r4
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	d145      	bne.n	8003eac <_malloc_r+0xdc>
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d048      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	4631      	mov	r1, r6
 8003e28:	4638      	mov	r0, r7
 8003e2a:	eb04 0903 	add.w	r9, r4, r3
 8003e2e:	f000 fb61 	bl	80044f4 <_sbrk_r>
 8003e32:	4581      	cmp	r9, r0
 8003e34:	d13f      	bne.n	8003eb6 <_malloc_r+0xe6>
 8003e36:	6821      	ldr	r1, [r4, #0]
 8003e38:	4638      	mov	r0, r7
 8003e3a:	1a6d      	subs	r5, r5, r1
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	f7ff ffa7 	bl	8003d90 <sbrk_aligned>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d037      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	442b      	add	r3, r5
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d038      	beq.n	8003ec6 <_malloc_r+0xf6>
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	d12b      	bne.n	8003eb2 <_malloc_r+0xe2>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xb0>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d41f      	bmi.n	8003ea6 <_malloc_r+0xd6>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xca>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4638      	mov	r0, r7
 8003e82:	f104 060b 	add.w	r6, r4, #11
 8003e86:	f000 f829 	bl	8003edc <__malloc_unlock>
 8003e8a:	f026 0607 	bic.w	r6, r6, #7
 8003e8e:	1d23      	adds	r3, r4, #4
 8003e90:	1af2      	subs	r2, r6, r3
 8003e92:	d0ae      	beq.n	8003df2 <_malloc_r+0x22>
 8003e94:	1b9b      	subs	r3, r3, r6
 8003e96:	50a3      	str	r3, [r4, r2]
 8003e98:	e7ab      	b.n	8003df2 <_malloc_r+0x22>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	d1dd      	bne.n	8003e5c <_malloc_r+0x8c>
 8003ea0:	f8c8 2000 	str.w	r2, [r8]
 8003ea4:	e7ec      	b.n	8003e80 <_malloc_r+0xb0>
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	6864      	ldr	r4, [r4, #4]
 8003eaa:	e7ac      	b.n	8003e06 <_malloc_r+0x36>
 8003eac:	4634      	mov	r4, r6
 8003eae:	6876      	ldr	r6, [r6, #4]
 8003eb0:	e7b4      	b.n	8003e1c <_malloc_r+0x4c>
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	e7cc      	b.n	8003e50 <_malloc_r+0x80>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	4638      	mov	r0, r7
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	f000 f80e 	bl	8003edc <__malloc_unlock>
 8003ec0:	e797      	b.n	8003df2 <_malloc_r+0x22>
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	e7dc      	b.n	8003e80 <_malloc_r+0xb0>
 8003ec6:	605b      	str	r3, [r3, #4]
 8003ec8:	deff      	udf	#255	; 0xff
 8003eca:	bf00      	nop
 8003ecc:	20000310 	.word	0x20000310

08003ed0 <__malloc_lock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_lock+0x8>)
 8003ed2:	f7ff bf13 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	2000030c 	.word	0x2000030c

08003edc <__malloc_unlock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_unlock+0x8>)
 8003ede:	f7ff bf0e 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	2000030c 	.word	0x2000030c

08003ee8 <__ssputs_r>:
 8003ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	461f      	mov	r7, r3
 8003eee:	688e      	ldr	r6, [r1, #8]
 8003ef0:	4682      	mov	sl, r0
 8003ef2:	42be      	cmp	r6, r7
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	680b      	ldr	r3, [r1, #0]
 8003efa:	d82c      	bhi.n	8003f56 <__ssputs_r+0x6e>
 8003efc:	898a      	ldrh	r2, [r1, #12]
 8003efe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f02:	d026      	beq.n	8003f52 <__ssputs_r+0x6a>
 8003f04:	6965      	ldr	r5, [r4, #20]
 8003f06:	6909      	ldr	r1, [r1, #16]
 8003f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f0c:	eba3 0901 	sub.w	r9, r3, r1
 8003f10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f14:	1c7b      	adds	r3, r7, #1
 8003f16:	444b      	add	r3, r9
 8003f18:	106d      	asrs	r5, r5, #1
 8003f1a:	429d      	cmp	r5, r3
 8003f1c:	bf38      	it	cc
 8003f1e:	461d      	movcc	r5, r3
 8003f20:	0553      	lsls	r3, r2, #21
 8003f22:	d527      	bpl.n	8003f74 <__ssputs_r+0x8c>
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7ff ff53 	bl	8003dd0 <_malloc_r>
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	b360      	cbz	r0, 8003f88 <__ssputs_r+0xa0>
 8003f2e:	464a      	mov	r2, r9
 8003f30:	6921      	ldr	r1, [r4, #16]
 8003f32:	f000 fafd 	bl	8004530 <memcpy>
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	6126      	str	r6, [r4, #16]
 8003f44:	444e      	add	r6, r9
 8003f46:	6026      	str	r6, [r4, #0]
 8003f48:	463e      	mov	r6, r7
 8003f4a:	6165      	str	r5, [r4, #20]
 8003f4c:	eba5 0509 	sub.w	r5, r5, r9
 8003f50:	60a5      	str	r5, [r4, #8]
 8003f52:	42be      	cmp	r6, r7
 8003f54:	d900      	bls.n	8003f58 <__ssputs_r+0x70>
 8003f56:	463e      	mov	r6, r7
 8003f58:	4632      	mov	r2, r6
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	6820      	ldr	r0, [r4, #0]
 8003f5e:	f000 faaf 	bl	80044c0 <memmove>
 8003f62:	2000      	movs	r0, #0
 8003f64:	68a3      	ldr	r3, [r4, #8]
 8003f66:	1b9b      	subs	r3, r3, r6
 8003f68:	60a3      	str	r3, [r4, #8]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4433      	add	r3, r6
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	462a      	mov	r2, r5
 8003f76:	f000 fae9 	bl	800454c <_realloc_r>
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d1e0      	bne.n	8003f42 <__ssputs_r+0x5a>
 8003f80:	4650      	mov	r0, sl
 8003f82:	6921      	ldr	r1, [r4, #16]
 8003f84:	f7ff febc 	bl	8003d00 <_free_r>
 8003f88:	230c      	movs	r3, #12
 8003f8a:	f8ca 3000 	str.w	r3, [sl]
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	e7e9      	b.n	8003f70 <__ssputs_r+0x88>

08003f9c <_svfiprintf_r>:
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa0:	4698      	mov	r8, r3
 8003fa2:	898b      	ldrh	r3, [r1, #12]
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	460d      	mov	r5, r1
 8003faa:	4614      	mov	r4, r2
 8003fac:	b09d      	sub	sp, #116	; 0x74
 8003fae:	d50e      	bpl.n	8003fce <_svfiprintf_r+0x32>
 8003fb0:	690b      	ldr	r3, [r1, #16]
 8003fb2:	b963      	cbnz	r3, 8003fce <_svfiprintf_r+0x32>
 8003fb4:	2140      	movs	r1, #64	; 0x40
 8003fb6:	f7ff ff0b 	bl	8003dd0 <_malloc_r>
 8003fba:	6028      	str	r0, [r5, #0]
 8003fbc:	6128      	str	r0, [r5, #16]
 8003fbe:	b920      	cbnz	r0, 8003fca <_svfiprintf_r+0x2e>
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	e0d0      	b.n	800416c <_svfiprintf_r+0x1d0>
 8003fca:	2340      	movs	r3, #64	; 0x40
 8003fcc:	616b      	str	r3, [r5, #20]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fd8:	2330      	movs	r3, #48	; 0x30
 8003fda:	f04f 0901 	mov.w	r9, #1
 8003fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004184 <_svfiprintf_r+0x1e8>
 8003fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fea:	4623      	mov	r3, r4
 8003fec:	469a      	mov	sl, r3
 8003fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff2:	b10a      	cbz	r2, 8003ff8 <_svfiprintf_r+0x5c>
 8003ff4:	2a25      	cmp	r2, #37	; 0x25
 8003ff6:	d1f9      	bne.n	8003fec <_svfiprintf_r+0x50>
 8003ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8003ffc:	d00b      	beq.n	8004016 <_svfiprintf_r+0x7a>
 8003ffe:	465b      	mov	r3, fp
 8004000:	4622      	mov	r2, r4
 8004002:	4629      	mov	r1, r5
 8004004:	4638      	mov	r0, r7
 8004006:	f7ff ff6f 	bl	8003ee8 <__ssputs_r>
 800400a:	3001      	adds	r0, #1
 800400c:	f000 80a9 	beq.w	8004162 <_svfiprintf_r+0x1c6>
 8004010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004012:	445a      	add	r2, fp
 8004014:	9209      	str	r2, [sp, #36]	; 0x24
 8004016:	f89a 3000 	ldrb.w	r3, [sl]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80a1 	beq.w	8004162 <_svfiprintf_r+0x1c6>
 8004020:	2300      	movs	r3, #0
 8004022:	f04f 32ff 	mov.w	r2, #4294967295
 8004026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800402a:	f10a 0a01 	add.w	sl, sl, #1
 800402e:	9304      	str	r3, [sp, #16]
 8004030:	9307      	str	r3, [sp, #28]
 8004032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004036:	931a      	str	r3, [sp, #104]	; 0x68
 8004038:	4654      	mov	r4, sl
 800403a:	2205      	movs	r2, #5
 800403c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004040:	4850      	ldr	r0, [pc, #320]	; (8004184 <_svfiprintf_r+0x1e8>)
 8004042:	f000 fa67 	bl	8004514 <memchr>
 8004046:	9a04      	ldr	r2, [sp, #16]
 8004048:	b9d8      	cbnz	r0, 8004082 <_svfiprintf_r+0xe6>
 800404a:	06d0      	lsls	r0, r2, #27
 800404c:	bf44      	itt	mi
 800404e:	2320      	movmi	r3, #32
 8004050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004054:	0711      	lsls	r1, r2, #28
 8004056:	bf44      	itt	mi
 8004058:	232b      	movmi	r3, #43	; 0x2b
 800405a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800405e:	f89a 3000 	ldrb.w	r3, [sl]
 8004062:	2b2a      	cmp	r3, #42	; 0x2a
 8004064:	d015      	beq.n	8004092 <_svfiprintf_r+0xf6>
 8004066:	4654      	mov	r4, sl
 8004068:	2000      	movs	r0, #0
 800406a:	f04f 0c0a 	mov.w	ip, #10
 800406e:	9a07      	ldr	r2, [sp, #28]
 8004070:	4621      	mov	r1, r4
 8004072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004076:	3b30      	subs	r3, #48	; 0x30
 8004078:	2b09      	cmp	r3, #9
 800407a:	d94d      	bls.n	8004118 <_svfiprintf_r+0x17c>
 800407c:	b1b0      	cbz	r0, 80040ac <_svfiprintf_r+0x110>
 800407e:	9207      	str	r2, [sp, #28]
 8004080:	e014      	b.n	80040ac <_svfiprintf_r+0x110>
 8004082:	eba0 0308 	sub.w	r3, r0, r8
 8004086:	fa09 f303 	lsl.w	r3, r9, r3
 800408a:	4313      	orrs	r3, r2
 800408c:	46a2      	mov	sl, r4
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	e7d2      	b.n	8004038 <_svfiprintf_r+0x9c>
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	1d19      	adds	r1, r3, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	9103      	str	r1, [sp, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	bfbb      	ittet	lt
 800409e:	425b      	neglt	r3, r3
 80040a0:	f042 0202 	orrlt.w	r2, r2, #2
 80040a4:	9307      	strge	r3, [sp, #28]
 80040a6:	9307      	strlt	r3, [sp, #28]
 80040a8:	bfb8      	it	lt
 80040aa:	9204      	strlt	r2, [sp, #16]
 80040ac:	7823      	ldrb	r3, [r4, #0]
 80040ae:	2b2e      	cmp	r3, #46	; 0x2e
 80040b0:	d10c      	bne.n	80040cc <_svfiprintf_r+0x130>
 80040b2:	7863      	ldrb	r3, [r4, #1]
 80040b4:	2b2a      	cmp	r3, #42	; 0x2a
 80040b6:	d134      	bne.n	8004122 <_svfiprintf_r+0x186>
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	3402      	adds	r4, #2
 80040bc:	1d1a      	adds	r2, r3, #4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	9203      	str	r2, [sp, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfb8      	it	lt
 80040c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ca:	9305      	str	r3, [sp, #20]
 80040cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004188 <_svfiprintf_r+0x1ec>
 80040d0:	2203      	movs	r2, #3
 80040d2:	4650      	mov	r0, sl
 80040d4:	7821      	ldrb	r1, [r4, #0]
 80040d6:	f000 fa1d 	bl	8004514 <memchr>
 80040da:	b138      	cbz	r0, 80040ec <_svfiprintf_r+0x150>
 80040dc:	2240      	movs	r2, #64	; 0x40
 80040de:	9b04      	ldr	r3, [sp, #16]
 80040e0:	eba0 000a 	sub.w	r0, r0, sl
 80040e4:	4082      	lsls	r2, r0
 80040e6:	4313      	orrs	r3, r2
 80040e8:	3401      	adds	r4, #1
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f0:	2206      	movs	r2, #6
 80040f2:	4826      	ldr	r0, [pc, #152]	; (800418c <_svfiprintf_r+0x1f0>)
 80040f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040f8:	f000 fa0c 	bl	8004514 <memchr>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d038      	beq.n	8004172 <_svfiprintf_r+0x1d6>
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <_svfiprintf_r+0x1f4>)
 8004102:	bb1b      	cbnz	r3, 800414c <_svfiprintf_r+0x1b0>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	3307      	adds	r3, #7
 8004108:	f023 0307 	bic.w	r3, r3, #7
 800410c:	3308      	adds	r3, #8
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004112:	4433      	add	r3, r6
 8004114:	9309      	str	r3, [sp, #36]	; 0x24
 8004116:	e768      	b.n	8003fea <_svfiprintf_r+0x4e>
 8004118:	460c      	mov	r4, r1
 800411a:	2001      	movs	r0, #1
 800411c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004120:	e7a6      	b.n	8004070 <_svfiprintf_r+0xd4>
 8004122:	2300      	movs	r3, #0
 8004124:	f04f 0c0a 	mov.w	ip, #10
 8004128:	4619      	mov	r1, r3
 800412a:	3401      	adds	r4, #1
 800412c:	9305      	str	r3, [sp, #20]
 800412e:	4620      	mov	r0, r4
 8004130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004134:	3a30      	subs	r2, #48	; 0x30
 8004136:	2a09      	cmp	r2, #9
 8004138:	d903      	bls.n	8004142 <_svfiprintf_r+0x1a6>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0c6      	beq.n	80040cc <_svfiprintf_r+0x130>
 800413e:	9105      	str	r1, [sp, #20]
 8004140:	e7c4      	b.n	80040cc <_svfiprintf_r+0x130>
 8004142:	4604      	mov	r4, r0
 8004144:	2301      	movs	r3, #1
 8004146:	fb0c 2101 	mla	r1, ip, r1, r2
 800414a:	e7f0      	b.n	800412e <_svfiprintf_r+0x192>
 800414c:	ab03      	add	r3, sp, #12
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	462a      	mov	r2, r5
 8004152:	4638      	mov	r0, r7
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <_svfiprintf_r+0x1f8>)
 8004156:	a904      	add	r1, sp, #16
 8004158:	f3af 8000 	nop.w
 800415c:	1c42      	adds	r2, r0, #1
 800415e:	4606      	mov	r6, r0
 8004160:	d1d6      	bne.n	8004110 <_svfiprintf_r+0x174>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	065b      	lsls	r3, r3, #25
 8004166:	f53f af2d 	bmi.w	8003fc4 <_svfiprintf_r+0x28>
 800416a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800416c:	b01d      	add	sp, #116	; 0x74
 800416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004172:	ab03      	add	r3, sp, #12
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	462a      	mov	r2, r5
 8004178:	4638      	mov	r0, r7
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <_svfiprintf_r+0x1f8>)
 800417c:	a904      	add	r1, sp, #16
 800417e:	f000 f87d 	bl	800427c <_printf_i>
 8004182:	e7eb      	b.n	800415c <_svfiprintf_r+0x1c0>
 8004184:	08004642 	.word	0x08004642
 8004188:	08004648 	.word	0x08004648
 800418c:	0800464c 	.word	0x0800464c
 8004190:	00000000 	.word	0x00000000
 8004194:	08003ee9 	.word	0x08003ee9

08004198 <_printf_common>:
 8004198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	4616      	mov	r6, r2
 800419e:	4699      	mov	r9, r3
 80041a0:	688a      	ldr	r2, [r1, #8]
 80041a2:	690b      	ldr	r3, [r1, #16]
 80041a4:	4607      	mov	r7, r0
 80041a6:	4293      	cmp	r3, r2
 80041a8:	bfb8      	it	lt
 80041aa:	4613      	movlt	r3, r2
 80041ac:	6033      	str	r3, [r6, #0]
 80041ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041b2:	460c      	mov	r4, r1
 80041b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041b8:	b10a      	cbz	r2, 80041be <_printf_common+0x26>
 80041ba:	3301      	adds	r3, #1
 80041bc:	6033      	str	r3, [r6, #0]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	0699      	lsls	r1, r3, #26
 80041c2:	bf42      	ittt	mi
 80041c4:	6833      	ldrmi	r3, [r6, #0]
 80041c6:	3302      	addmi	r3, #2
 80041c8:	6033      	strmi	r3, [r6, #0]
 80041ca:	6825      	ldr	r5, [r4, #0]
 80041cc:	f015 0506 	ands.w	r5, r5, #6
 80041d0:	d106      	bne.n	80041e0 <_printf_common+0x48>
 80041d2:	f104 0a19 	add.w	sl, r4, #25
 80041d6:	68e3      	ldr	r3, [r4, #12]
 80041d8:	6832      	ldr	r2, [r6, #0]
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	42ab      	cmp	r3, r5
 80041de:	dc2b      	bgt.n	8004238 <_printf_common+0xa0>
 80041e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041e4:	1e13      	subs	r3, r2, #0
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	bf18      	it	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	0692      	lsls	r2, r2, #26
 80041ee:	d430      	bmi.n	8004252 <_printf_common+0xba>
 80041f0:	4649      	mov	r1, r9
 80041f2:	4638      	mov	r0, r7
 80041f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041f8:	47c0      	blx	r8
 80041fa:	3001      	adds	r0, #1
 80041fc:	d023      	beq.n	8004246 <_printf_common+0xae>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	6922      	ldr	r2, [r4, #16]
 8004202:	f003 0306 	and.w	r3, r3, #6
 8004206:	2b04      	cmp	r3, #4
 8004208:	bf14      	ite	ne
 800420a:	2500      	movne	r5, #0
 800420c:	6833      	ldreq	r3, [r6, #0]
 800420e:	f04f 0600 	mov.w	r6, #0
 8004212:	bf08      	it	eq
 8004214:	68e5      	ldreq	r5, [r4, #12]
 8004216:	f104 041a 	add.w	r4, r4, #26
 800421a:	bf08      	it	eq
 800421c:	1aed      	subeq	r5, r5, r3
 800421e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004222:	bf08      	it	eq
 8004224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004228:	4293      	cmp	r3, r2
 800422a:	bfc4      	itt	gt
 800422c:	1a9b      	subgt	r3, r3, r2
 800422e:	18ed      	addgt	r5, r5, r3
 8004230:	42b5      	cmp	r5, r6
 8004232:	d11a      	bne.n	800426a <_printf_common+0xd2>
 8004234:	2000      	movs	r0, #0
 8004236:	e008      	b.n	800424a <_printf_common+0xb2>
 8004238:	2301      	movs	r3, #1
 800423a:	4652      	mov	r2, sl
 800423c:	4649      	mov	r1, r9
 800423e:	4638      	mov	r0, r7
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d103      	bne.n	800424e <_printf_common+0xb6>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424e:	3501      	adds	r5, #1
 8004250:	e7c1      	b.n	80041d6 <_printf_common+0x3e>
 8004252:	2030      	movs	r0, #48	; 0x30
 8004254:	18e1      	adds	r1, r4, r3
 8004256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004260:	4422      	add	r2, r4
 8004262:	3302      	adds	r3, #2
 8004264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004268:	e7c2      	b.n	80041f0 <_printf_common+0x58>
 800426a:	2301      	movs	r3, #1
 800426c:	4622      	mov	r2, r4
 800426e:	4649      	mov	r1, r9
 8004270:	4638      	mov	r0, r7
 8004272:	47c0      	blx	r8
 8004274:	3001      	adds	r0, #1
 8004276:	d0e6      	beq.n	8004246 <_printf_common+0xae>
 8004278:	3601      	adds	r6, #1
 800427a:	e7d9      	b.n	8004230 <_printf_common+0x98>

0800427c <_printf_i>:
 800427c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	7e0f      	ldrb	r7, [r1, #24]
 8004282:	4691      	mov	r9, r2
 8004284:	2f78      	cmp	r7, #120	; 0x78
 8004286:	4680      	mov	r8, r0
 8004288:	460c      	mov	r4, r1
 800428a:	469a      	mov	sl, r3
 800428c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800428e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004292:	d807      	bhi.n	80042a4 <_printf_i+0x28>
 8004294:	2f62      	cmp	r7, #98	; 0x62
 8004296:	d80a      	bhi.n	80042ae <_printf_i+0x32>
 8004298:	2f00      	cmp	r7, #0
 800429a:	f000 80d5 	beq.w	8004448 <_printf_i+0x1cc>
 800429e:	2f58      	cmp	r7, #88	; 0x58
 80042a0:	f000 80c1 	beq.w	8004426 <_printf_i+0x1aa>
 80042a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042ac:	e03a      	b.n	8004324 <_printf_i+0xa8>
 80042ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042b2:	2b15      	cmp	r3, #21
 80042b4:	d8f6      	bhi.n	80042a4 <_printf_i+0x28>
 80042b6:	a101      	add	r1, pc, #4	; (adr r1, 80042bc <_printf_i+0x40>)
 80042b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004329 	.word	0x08004329
 80042c4:	080042a5 	.word	0x080042a5
 80042c8:	080042a5 	.word	0x080042a5
 80042cc:	080042a5 	.word	0x080042a5
 80042d0:	080042a5 	.word	0x080042a5
 80042d4:	08004329 	.word	0x08004329
 80042d8:	080042a5 	.word	0x080042a5
 80042dc:	080042a5 	.word	0x080042a5
 80042e0:	080042a5 	.word	0x080042a5
 80042e4:	080042a5 	.word	0x080042a5
 80042e8:	0800442f 	.word	0x0800442f
 80042ec:	08004355 	.word	0x08004355
 80042f0:	080043e9 	.word	0x080043e9
 80042f4:	080042a5 	.word	0x080042a5
 80042f8:	080042a5 	.word	0x080042a5
 80042fc:	08004451 	.word	0x08004451
 8004300:	080042a5 	.word	0x080042a5
 8004304:	08004355 	.word	0x08004355
 8004308:	080042a5 	.word	0x080042a5
 800430c:	080042a5 	.word	0x080042a5
 8004310:	080043f1 	.word	0x080043f1
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	602a      	str	r2, [r5, #0]
 800431c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004324:	2301      	movs	r3, #1
 8004326:	e0a0      	b.n	800446a <_printf_i+0x1ee>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	0607      	lsls	r7, r0, #24
 800432e:	f103 0104 	add.w	r1, r3, #4
 8004332:	6029      	str	r1, [r5, #0]
 8004334:	d501      	bpl.n	800433a <_printf_i+0xbe>
 8004336:	681e      	ldr	r6, [r3, #0]
 8004338:	e003      	b.n	8004342 <_printf_i+0xc6>
 800433a:	0646      	lsls	r6, r0, #25
 800433c:	d5fb      	bpl.n	8004336 <_printf_i+0xba>
 800433e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004342:	2e00      	cmp	r6, #0
 8004344:	da03      	bge.n	800434e <_printf_i+0xd2>
 8004346:	232d      	movs	r3, #45	; 0x2d
 8004348:	4276      	negs	r6, r6
 800434a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800434e:	230a      	movs	r3, #10
 8004350:	4859      	ldr	r0, [pc, #356]	; (80044b8 <_printf_i+0x23c>)
 8004352:	e012      	b.n	800437a <_printf_i+0xfe>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	1d19      	adds	r1, r3, #4
 800435a:	6029      	str	r1, [r5, #0]
 800435c:	0605      	lsls	r5, r0, #24
 800435e:	d501      	bpl.n	8004364 <_printf_i+0xe8>
 8004360:	681e      	ldr	r6, [r3, #0]
 8004362:	e002      	b.n	800436a <_printf_i+0xee>
 8004364:	0641      	lsls	r1, r0, #25
 8004366:	d5fb      	bpl.n	8004360 <_printf_i+0xe4>
 8004368:	881e      	ldrh	r6, [r3, #0]
 800436a:	2f6f      	cmp	r7, #111	; 0x6f
 800436c:	bf0c      	ite	eq
 800436e:	2308      	moveq	r3, #8
 8004370:	230a      	movne	r3, #10
 8004372:	4851      	ldr	r0, [pc, #324]	; (80044b8 <_printf_i+0x23c>)
 8004374:	2100      	movs	r1, #0
 8004376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800437a:	6865      	ldr	r5, [r4, #4]
 800437c:	2d00      	cmp	r5, #0
 800437e:	bfa8      	it	ge
 8004380:	6821      	ldrge	r1, [r4, #0]
 8004382:	60a5      	str	r5, [r4, #8]
 8004384:	bfa4      	itt	ge
 8004386:	f021 0104 	bicge.w	r1, r1, #4
 800438a:	6021      	strge	r1, [r4, #0]
 800438c:	b90e      	cbnz	r6, 8004392 <_printf_i+0x116>
 800438e:	2d00      	cmp	r5, #0
 8004390:	d04b      	beq.n	800442a <_printf_i+0x1ae>
 8004392:	4615      	mov	r5, r2
 8004394:	fbb6 f1f3 	udiv	r1, r6, r3
 8004398:	fb03 6711 	mls	r7, r3, r1, r6
 800439c:	5dc7      	ldrb	r7, [r0, r7]
 800439e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043a2:	4637      	mov	r7, r6
 80043a4:	42bb      	cmp	r3, r7
 80043a6:	460e      	mov	r6, r1
 80043a8:	d9f4      	bls.n	8004394 <_printf_i+0x118>
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d10b      	bne.n	80043c6 <_printf_i+0x14a>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	07de      	lsls	r6, r3, #31
 80043b2:	d508      	bpl.n	80043c6 <_printf_i+0x14a>
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	6861      	ldr	r1, [r4, #4]
 80043b8:	4299      	cmp	r1, r3
 80043ba:	bfde      	ittt	le
 80043bc:	2330      	movle	r3, #48	; 0x30
 80043be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043c6:	1b52      	subs	r2, r2, r5
 80043c8:	6122      	str	r2, [r4, #16]
 80043ca:	464b      	mov	r3, r9
 80043cc:	4621      	mov	r1, r4
 80043ce:	4640      	mov	r0, r8
 80043d0:	f8cd a000 	str.w	sl, [sp]
 80043d4:	aa03      	add	r2, sp, #12
 80043d6:	f7ff fedf 	bl	8004198 <_printf_common>
 80043da:	3001      	adds	r0, #1
 80043dc:	d14a      	bne.n	8004474 <_printf_i+0x1f8>
 80043de:	f04f 30ff 	mov.w	r0, #4294967295
 80043e2:	b004      	add	sp, #16
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	f043 0320 	orr.w	r3, r3, #32
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	2778      	movs	r7, #120	; 0x78
 80043f2:	4832      	ldr	r0, [pc, #200]	; (80044bc <_printf_i+0x240>)
 80043f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	6829      	ldr	r1, [r5, #0]
 80043fc:	061f      	lsls	r7, r3, #24
 80043fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004402:	d402      	bmi.n	800440a <_printf_i+0x18e>
 8004404:	065f      	lsls	r7, r3, #25
 8004406:	bf48      	it	mi
 8004408:	b2b6      	uxthmi	r6, r6
 800440a:	07df      	lsls	r7, r3, #31
 800440c:	bf48      	it	mi
 800440e:	f043 0320 	orrmi.w	r3, r3, #32
 8004412:	6029      	str	r1, [r5, #0]
 8004414:	bf48      	it	mi
 8004416:	6023      	strmi	r3, [r4, #0]
 8004418:	b91e      	cbnz	r6, 8004422 <_printf_i+0x1a6>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f023 0320 	bic.w	r3, r3, #32
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	2310      	movs	r3, #16
 8004424:	e7a6      	b.n	8004374 <_printf_i+0xf8>
 8004426:	4824      	ldr	r0, [pc, #144]	; (80044b8 <_printf_i+0x23c>)
 8004428:	e7e4      	b.n	80043f4 <_printf_i+0x178>
 800442a:	4615      	mov	r5, r2
 800442c:	e7bd      	b.n	80043aa <_printf_i+0x12e>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	6826      	ldr	r6, [r4, #0]
 8004432:	1d18      	adds	r0, r3, #4
 8004434:	6961      	ldr	r1, [r4, #20]
 8004436:	6028      	str	r0, [r5, #0]
 8004438:	0635      	lsls	r5, r6, #24
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	d501      	bpl.n	8004442 <_printf_i+0x1c6>
 800443e:	6019      	str	r1, [r3, #0]
 8004440:	e002      	b.n	8004448 <_printf_i+0x1cc>
 8004442:	0670      	lsls	r0, r6, #25
 8004444:	d5fb      	bpl.n	800443e <_printf_i+0x1c2>
 8004446:	8019      	strh	r1, [r3, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	4615      	mov	r5, r2
 800444c:	6123      	str	r3, [r4, #16]
 800444e:	e7bc      	b.n	80043ca <_printf_i+0x14e>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	2100      	movs	r1, #0
 8004454:	1d1a      	adds	r2, r3, #4
 8004456:	602a      	str	r2, [r5, #0]
 8004458:	681d      	ldr	r5, [r3, #0]
 800445a:	6862      	ldr	r2, [r4, #4]
 800445c:	4628      	mov	r0, r5
 800445e:	f000 f859 	bl	8004514 <memchr>
 8004462:	b108      	cbz	r0, 8004468 <_printf_i+0x1ec>
 8004464:	1b40      	subs	r0, r0, r5
 8004466:	6060      	str	r0, [r4, #4]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	6123      	str	r3, [r4, #16]
 800446c:	2300      	movs	r3, #0
 800446e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004472:	e7aa      	b.n	80043ca <_printf_i+0x14e>
 8004474:	462a      	mov	r2, r5
 8004476:	4649      	mov	r1, r9
 8004478:	4640      	mov	r0, r8
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	47d0      	blx	sl
 800447e:	3001      	adds	r0, #1
 8004480:	d0ad      	beq.n	80043de <_printf_i+0x162>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	079b      	lsls	r3, r3, #30
 8004486:	d413      	bmi.n	80044b0 <_printf_i+0x234>
 8004488:	68e0      	ldr	r0, [r4, #12]
 800448a:	9b03      	ldr	r3, [sp, #12]
 800448c:	4298      	cmp	r0, r3
 800448e:	bfb8      	it	lt
 8004490:	4618      	movlt	r0, r3
 8004492:	e7a6      	b.n	80043e2 <_printf_i+0x166>
 8004494:	2301      	movs	r3, #1
 8004496:	4632      	mov	r2, r6
 8004498:	4649      	mov	r1, r9
 800449a:	4640      	mov	r0, r8
 800449c:	47d0      	blx	sl
 800449e:	3001      	adds	r0, #1
 80044a0:	d09d      	beq.n	80043de <_printf_i+0x162>
 80044a2:	3501      	adds	r5, #1
 80044a4:	68e3      	ldr	r3, [r4, #12]
 80044a6:	9903      	ldr	r1, [sp, #12]
 80044a8:	1a5b      	subs	r3, r3, r1
 80044aa:	42ab      	cmp	r3, r5
 80044ac:	dcf2      	bgt.n	8004494 <_printf_i+0x218>
 80044ae:	e7eb      	b.n	8004488 <_printf_i+0x20c>
 80044b0:	2500      	movs	r5, #0
 80044b2:	f104 0619 	add.w	r6, r4, #25
 80044b6:	e7f5      	b.n	80044a4 <_printf_i+0x228>
 80044b8:	08004653 	.word	0x08004653
 80044bc:	08004664 	.word	0x08004664

080044c0 <memmove>:
 80044c0:	4288      	cmp	r0, r1
 80044c2:	b510      	push	{r4, lr}
 80044c4:	eb01 0402 	add.w	r4, r1, r2
 80044c8:	d902      	bls.n	80044d0 <memmove+0x10>
 80044ca:	4284      	cmp	r4, r0
 80044cc:	4623      	mov	r3, r4
 80044ce:	d807      	bhi.n	80044e0 <memmove+0x20>
 80044d0:	1e43      	subs	r3, r0, #1
 80044d2:	42a1      	cmp	r1, r4
 80044d4:	d008      	beq.n	80044e8 <memmove+0x28>
 80044d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044de:	e7f8      	b.n	80044d2 <memmove+0x12>
 80044e0:	4601      	mov	r1, r0
 80044e2:	4402      	add	r2, r0
 80044e4:	428a      	cmp	r2, r1
 80044e6:	d100      	bne.n	80044ea <memmove+0x2a>
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044f2:	e7f7      	b.n	80044e4 <memmove+0x24>

080044f4 <_sbrk_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	2300      	movs	r3, #0
 80044f8:	4d05      	ldr	r5, [pc, #20]	; (8004510 <_sbrk_r+0x1c>)
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	f7fc ff6a 	bl	80013d8 <_sbrk>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_sbrk_r+0x1a>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_sbrk_r+0x1a>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000308 	.word	0x20000308

08004514 <memchr>:
 8004514:	4603      	mov	r3, r0
 8004516:	b510      	push	{r4, lr}
 8004518:	b2c9      	uxtb	r1, r1
 800451a:	4402      	add	r2, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	4618      	mov	r0, r3
 8004520:	d101      	bne.n	8004526 <memchr+0x12>
 8004522:	2000      	movs	r0, #0
 8004524:	e003      	b.n	800452e <memchr+0x1a>
 8004526:	7804      	ldrb	r4, [r0, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	428c      	cmp	r4, r1
 800452c:	d1f6      	bne.n	800451c <memchr+0x8>
 800452e:	bd10      	pop	{r4, pc}

08004530 <memcpy>:
 8004530:	440a      	add	r2, r1
 8004532:	4291      	cmp	r1, r2
 8004534:	f100 33ff 	add.w	r3, r0, #4294967295
 8004538:	d100      	bne.n	800453c <memcpy+0xc>
 800453a:	4770      	bx	lr
 800453c:	b510      	push	{r4, lr}
 800453e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004542:	4291      	cmp	r1, r2
 8004544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004548:	d1f9      	bne.n	800453e <memcpy+0xe>
 800454a:	bd10      	pop	{r4, pc}

0800454c <_realloc_r>:
 800454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004550:	4680      	mov	r8, r0
 8004552:	4614      	mov	r4, r2
 8004554:	460e      	mov	r6, r1
 8004556:	b921      	cbnz	r1, 8004562 <_realloc_r+0x16>
 8004558:	4611      	mov	r1, r2
 800455a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800455e:	f7ff bc37 	b.w	8003dd0 <_malloc_r>
 8004562:	b92a      	cbnz	r2, 8004570 <_realloc_r+0x24>
 8004564:	f7ff fbcc 	bl	8003d00 <_free_r>
 8004568:	4625      	mov	r5, r4
 800456a:	4628      	mov	r0, r5
 800456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004570:	f000 f81b 	bl	80045aa <_malloc_usable_size_r>
 8004574:	4284      	cmp	r4, r0
 8004576:	4607      	mov	r7, r0
 8004578:	d802      	bhi.n	8004580 <_realloc_r+0x34>
 800457a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800457e:	d812      	bhi.n	80045a6 <_realloc_r+0x5a>
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fc24 	bl	8003dd0 <_malloc_r>
 8004588:	4605      	mov	r5, r0
 800458a:	2800      	cmp	r0, #0
 800458c:	d0ed      	beq.n	800456a <_realloc_r+0x1e>
 800458e:	42bc      	cmp	r4, r7
 8004590:	4622      	mov	r2, r4
 8004592:	4631      	mov	r1, r6
 8004594:	bf28      	it	cs
 8004596:	463a      	movcs	r2, r7
 8004598:	f7ff ffca 	bl	8004530 <memcpy>
 800459c:	4631      	mov	r1, r6
 800459e:	4640      	mov	r0, r8
 80045a0:	f7ff fbae 	bl	8003d00 <_free_r>
 80045a4:	e7e1      	b.n	800456a <_realloc_r+0x1e>
 80045a6:	4635      	mov	r5, r6
 80045a8:	e7df      	b.n	800456a <_realloc_r+0x1e>

080045aa <_malloc_usable_size_r>:
 80045aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ae:	1f18      	subs	r0, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bfbc      	itt	lt
 80045b4:	580b      	ldrlt	r3, [r1, r0]
 80045b6:	18c0      	addlt	r0, r0, r3
 80045b8:	4770      	bx	lr
	...

080045bc <_init>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr

080045c8 <_fini>:
 80045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ca:	bf00      	nop
 80045cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ce:	bc08      	pop	{r3}
 80045d0:	469e      	mov	lr, r3
 80045d2:	4770      	bx	lr
